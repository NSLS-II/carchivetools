#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys, os.path, logging
from optparse import OptionParser

from twisted.internet import reactor, defer

pname=os.path.basename(sys.argv[0])

act='get'
if pname.startswith('arinfo'):
    act='info'
elif pname.startswith('argrep'):
    act='grep'
elif pname.startswith('arget'):
    act='get'
elif pname.startswith('arh5export'):
    act='h5export'

par=OptionParser(
    usage='%prog [options] channel <channels ...>',
    description='Query the channel archiver'
    )

# Select operation
par.add_option('', '--helptime', action="store_true", default=False,
               help="Show help on date/time format")
par.add_option('-I','--info', action="store_true", default=False,
               help='Show archive server information')
par.add_option('-S','--search', action="store_true", default=False,
               help='Search for channels matching the given pattern(s)')
par.add_option('-G','--get', action="store_true", default=False,
               help='Retrieve data for given channels')
par.add_option('-E','--export', metavar='TYPE', default=None,
               help="Retrieve data and write to file in the given format (eg. hdf5, PB raw)")

# Query options
par.add_option('-s','--start', metavar='TIME',
               help='Start of query window (required)')
par.add_option('-e','--end', metavar='TIME', default=None,
               help='End of query window (defaults to current system time)')
par.add_option('-c','--count', metavar='NUM', default=None, type="int",
               help='Total maximum number of samples to read. (default is inf.)')
par.add_option('-l','--chunk', metavar='NUM', default=1000, type="int",
               help='Maximum number of samples to request in a single query.  (1000 = default)')
par.add_option('-a','--archive', metavar='NAME', action='append', default=[],
               help='Archive name.  Wildcards allowed.  Can be given more than once')
par.add_option('-H','--how', metavar='NAME', default='raw',
               help="Query method (eg. raw)")

par.add_option('-M','--merge', metavar='NAME', default='simple',
               help='How to attempt to combine data for one channel received in '
               'different responces.  Options: none, simple')

# Data options
par.add_option('', '--no-enum', default=False, action='store_true', dest='enumAsInt',
               help='Return enumerations as integers')

# Input options
par.add_option('', '--pv-list', metavar='FILE', dest='pvlist',
               help='Read PVs from file in addition argument list ("-" for stdin)')

# Output options
par.add_option('-T','--time', metavar='FMT', dest='timefmt',
               help='Output time format: string, posix')

# General options
par.add_option('-v','--verbose', action='count', default=0,
               help='Print more')
par.add_option('-d','--debug', action='store_true', default=False,
               help='Show archiver queries')
par.add_option('-C','--conf', metavar='KEY', default='DEFAULT',
               help='Key for the server configuration')

# PB archive options
par.add_option('--export-all', action='store_true', help='(PB archive only) Archive all PVs.')
par.add_option('--export-pattern', action='append', help='(PB archive only) Archive PVs matching this regex. Can appear multiple times.')
par.add_option('--export-no-default-delimiters', action='store_true', help='(PB archive only) Don\'t use default export delimiters.')
par.add_option('--export-delimiter', action='append', help='(PB archive only) Add extra PV name delimiter.')
par.add_option('--export-granularity', help='(PB archive only) Time granularity for splitting data into files (5min, 15min, 30min, 1day, 1month, 1year).')
par.add_option('--export-out-dir', help='(PB archive only) Output directory.')

opt, args = par.parse_args()

if opt.helptime:
    from carchive import date
    print date.__doc__
    sys.exit(0)

if opt.merge not in ['none','simple']:
    par.error('Invalid merge method %s'%opt.merge)

LVL={0:logging.WARN, 1:logging.INFO, 2:logging.DEBUG}

logging.basicConfig(format='%(message)s',level=LVL.get(opt.verbose, LVL[2]))

if opt.pvlist:
    if opt.pvlist == '-':
        AF = sys.stdin
    else:
        AF = open(opt.pvlist, 'r')
    args += filter(lambda L:len(L) and L[0]!='#', map(str.rstrip, AF.readlines()))
    if opt.pvlist != '-':
        AF.close()

from carchive.util import HandledError
from carchive.archive import getArchive
from carchive._conf import loadConfig

conf = loadConfig(opt.conf)

if len(opt.archive)==0:
    opt.archive = conf.get('defaultarchs','*').split()

if opt.info:
    act='info'
elif opt.search:
    act='grep'
elif opt.get:
    act='get'
elif opt.export=='hdf5':
    act='h5export'
elif opt.export=='pbraw':
    act='pbrawexport'

@defer.inlineCallbacks
def haveArchive(act, opt, args, conf):

    if opt.verbose>0:
        print 'Command:',act

    mod = __import__('carchive.cmd', fromlist=[act])
    mod = getattr(mod, act)

    try:
        serv = yield getArchive(conf)
    except HandledError:
        defer.returnValue(None)
    except:
        E = sys.exc_info()[1]
        if opt.verbose<2:
            print 'Failed to fetch data server information.',E
            defer.returnValue(None)
        else:
            raise
    
    try:
        done = mod.cmd(action=act, archive=serv,
                       opt=opt, args=args,
                       conf=conf)

        yield done
    except HandledError:
        pass
    except:
        E = sys.exc_info()[1]
        if opt.verbose<2:
            print 'Operation failed.',E
        else:
            raise

@defer.inlineCallbacks
def main(*args):
    try:
        yield haveArchive(*args)
    finally:
        reactor.stop()

reactor.callWhenRunning(main, act, opt, args, conf)

reactor.run()

sys.exit(0)
