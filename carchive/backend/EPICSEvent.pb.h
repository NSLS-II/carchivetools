// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EPICSEvent.proto

#ifndef PROTOBUF_EPICSEvent_2eproto__INCLUDED
#define PROTOBUF_EPICSEvent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace EPICS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EPICSEvent_2eproto();
void protobuf_AssignDesc_EPICSEvent_2eproto();
void protobuf_ShutdownFile_EPICSEvent_2eproto();

class FieldValue;
class ScalarString;
class ScalarByte;
class ScalarShort;
class ScalarInt;
class ScalarEnum;
class ScalarFloat;
class ScalarDouble;
class VectorString;
class VectorChar;
class VectorShort;
class VectorInt;
class VectorEnum;
class VectorFloat;
class VectorDouble;
class V4GenericBytes;
class PayloadInfo;

enum PayloadType {
  SCALAR_STRING = 0,
  SCALAR_SHORT = 1,
  SCALAR_FLOAT = 2,
  SCALAR_ENUM = 3,
  SCALAR_BYTE = 4,
  SCALAR_INT = 5,
  SCALAR_DOUBLE = 6,
  WAVEFORM_STRING = 7,
  WAVEFORM_SHORT = 8,
  WAVEFORM_FLOAT = 9,
  WAVEFORM_ENUM = 10,
  WAVEFORM_BYTE = 11,
  WAVEFORM_INT = 12,
  WAVEFORM_DOUBLE = 13,
  V4_GENERIC_BYTES = 14
};
bool PayloadType_IsValid(int value);
const PayloadType PayloadType_MIN = SCALAR_STRING;
const PayloadType PayloadType_MAX = V4_GENERIC_BYTES;
const int PayloadType_ARRAYSIZE = PayloadType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PayloadType_descriptor();
inline const ::std::string& PayloadType_Name(PayloadType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PayloadType_descriptor(), value);
}
inline bool PayloadType_Parse(
    const ::std::string& name, PayloadType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayloadType>(
    PayloadType_descriptor(), name, value);
}
// ===================================================================

class FieldValue : public ::google::protobuf::Message {
 public:
  FieldValue();
  virtual ~FieldValue();
  
  FieldValue(const FieldValue& from);
  
  inline FieldValue& operator=(const FieldValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldValue& default_instance();
  
  void Swap(FieldValue* other);
  
  // implements Message ----------------------------------------------
  
  FieldValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FieldValue& from);
  void MergeFrom(const FieldValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const char* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  
  // @@protoc_insertion_point(class_scope:EPICS.FieldValue)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_val();
  inline void clear_has_val();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* val_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static FieldValue* default_instance_;
};
// -------------------------------------------------------------------

class ScalarString : public ::google::protobuf::Message {
 public:
  ScalarString();
  virtual ~ScalarString();
  
  ScalarString(const ScalarString& from);
  
  inline ScalarString& operator=(const ScalarString& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScalarString& default_instance();
  
  void Swap(ScalarString* other);
  
  // implements Message ----------------------------------------------
  
  ScalarString* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScalarString& from);
  void MergeFrom(const ScalarString& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 secondsintoyear = 1;
  inline bool has_secondsintoyear() const;
  inline void clear_secondsintoyear();
  static const int kSecondsintoyearFieldNumber = 1;
  inline ::google::protobuf::uint32 secondsintoyear() const;
  inline void set_secondsintoyear(::google::protobuf::uint32 value);
  
  // required uint32 nano = 2;
  inline bool has_nano() const;
  inline void clear_nano();
  static const int kNanoFieldNumber = 2;
  inline ::google::protobuf::uint32 nano() const;
  inline void set_nano(::google::protobuf::uint32 value);
  
  // required string val = 3;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const char* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  
  // optional int32 severity = 4 [default = 0];
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 4;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);
  
  // optional int32 status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional uint32 repeatcount = 6;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatcountFieldNumber = 6;
  inline ::google::protobuf::uint32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::uint32 value);
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  inline int fieldvalues_size() const;
  inline void clear_fieldvalues();
  static const int kFieldvaluesFieldNumber = 7;
  inline const ::EPICS::FieldValue& fieldvalues(int index) const;
  inline ::EPICS::FieldValue* mutable_fieldvalues(int index);
  inline ::EPICS::FieldValue* add_fieldvalues();
  inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  
  // optional bool fieldactualchange = 8;
  inline bool has_fieldactualchange() const;
  inline void clear_fieldactualchange();
  static const int kFieldactualchangeFieldNumber = 8;
  inline bool fieldactualchange() const;
  inline void set_fieldactualchange(bool value);
  
  // @@protoc_insertion_point(class_scope:EPICS.ScalarString)
 private:
  inline void set_has_secondsintoyear();
  inline void clear_has_secondsintoyear();
  inline void set_has_nano();
  inline void clear_has_nano();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_fieldactualchange();
  inline void clear_has_fieldactualchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 secondsintoyear_;
  ::google::protobuf::uint32 nano_;
  ::std::string* val_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::google::protobuf::uint32 repeatcount_;
  bool fieldactualchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static ScalarString* default_instance_;
};
// -------------------------------------------------------------------

class ScalarByte : public ::google::protobuf::Message {
 public:
  ScalarByte();
  virtual ~ScalarByte();
  
  ScalarByte(const ScalarByte& from);
  
  inline ScalarByte& operator=(const ScalarByte& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScalarByte& default_instance();
  
  void Swap(ScalarByte* other);
  
  // implements Message ----------------------------------------------
  
  ScalarByte* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScalarByte& from);
  void MergeFrom(const ScalarByte& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 secondsintoyear = 1;
  inline bool has_secondsintoyear() const;
  inline void clear_secondsintoyear();
  static const int kSecondsintoyearFieldNumber = 1;
  inline ::google::protobuf::uint32 secondsintoyear() const;
  inline void set_secondsintoyear(::google::protobuf::uint32 value);
  
  // required uint32 nano = 2;
  inline bool has_nano() const;
  inline void clear_nano();
  static const int kNanoFieldNumber = 2;
  inline ::google::protobuf::uint32 nano() const;
  inline void set_nano(::google::protobuf::uint32 value);
  
  // required bytes val = 3;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const void* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  
  // optional int32 severity = 4 [default = 0];
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 4;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);
  
  // optional int32 status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional uint32 repeatcount = 6;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatcountFieldNumber = 6;
  inline ::google::protobuf::uint32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::uint32 value);
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  inline int fieldvalues_size() const;
  inline void clear_fieldvalues();
  static const int kFieldvaluesFieldNumber = 7;
  inline const ::EPICS::FieldValue& fieldvalues(int index) const;
  inline ::EPICS::FieldValue* mutable_fieldvalues(int index);
  inline ::EPICS::FieldValue* add_fieldvalues();
  inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  
  // optional bool fieldactualchange = 8;
  inline bool has_fieldactualchange() const;
  inline void clear_fieldactualchange();
  static const int kFieldactualchangeFieldNumber = 8;
  inline bool fieldactualchange() const;
  inline void set_fieldactualchange(bool value);
  
  // @@protoc_insertion_point(class_scope:EPICS.ScalarByte)
 private:
  inline void set_has_secondsintoyear();
  inline void clear_has_secondsintoyear();
  inline void set_has_nano();
  inline void clear_has_nano();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_fieldactualchange();
  inline void clear_has_fieldactualchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 secondsintoyear_;
  ::google::protobuf::uint32 nano_;
  ::std::string* val_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::google::protobuf::uint32 repeatcount_;
  bool fieldactualchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static ScalarByte* default_instance_;
};
// -------------------------------------------------------------------

class ScalarShort : public ::google::protobuf::Message {
 public:
  ScalarShort();
  virtual ~ScalarShort();
  
  ScalarShort(const ScalarShort& from);
  
  inline ScalarShort& operator=(const ScalarShort& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScalarShort& default_instance();
  
  void Swap(ScalarShort* other);
  
  // implements Message ----------------------------------------------
  
  ScalarShort* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScalarShort& from);
  void MergeFrom(const ScalarShort& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 secondsintoyear = 1;
  inline bool has_secondsintoyear() const;
  inline void clear_secondsintoyear();
  static const int kSecondsintoyearFieldNumber = 1;
  inline ::google::protobuf::uint32 secondsintoyear() const;
  inline void set_secondsintoyear(::google::protobuf::uint32 value);
  
  // required uint32 nano = 2;
  inline bool has_nano() const;
  inline void clear_nano();
  static const int kNanoFieldNumber = 2;
  inline ::google::protobuf::uint32 nano() const;
  inline void set_nano(::google::protobuf::uint32 value);
  
  // required sint32 val = 3;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline ::google::protobuf::int32 val() const;
  inline void set_val(::google::protobuf::int32 value);
  
  // optional int32 severity = 4 [default = 0];
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 4;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);
  
  // optional int32 status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional uint32 repeatcount = 6;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatcountFieldNumber = 6;
  inline ::google::protobuf::uint32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::uint32 value);
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  inline int fieldvalues_size() const;
  inline void clear_fieldvalues();
  static const int kFieldvaluesFieldNumber = 7;
  inline const ::EPICS::FieldValue& fieldvalues(int index) const;
  inline ::EPICS::FieldValue* mutable_fieldvalues(int index);
  inline ::EPICS::FieldValue* add_fieldvalues();
  inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  
  // optional bool fieldactualchange = 8;
  inline bool has_fieldactualchange() const;
  inline void clear_fieldactualchange();
  static const int kFieldactualchangeFieldNumber = 8;
  inline bool fieldactualchange() const;
  inline void set_fieldactualchange(bool value);
  
  // @@protoc_insertion_point(class_scope:EPICS.ScalarShort)
 private:
  inline void set_has_secondsintoyear();
  inline void clear_has_secondsintoyear();
  inline void set_has_nano();
  inline void clear_has_nano();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_fieldactualchange();
  inline void clear_has_fieldactualchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 secondsintoyear_;
  ::google::protobuf::uint32 nano_;
  ::google::protobuf::int32 val_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::uint32 repeatcount_;
  ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  bool fieldactualchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static ScalarShort* default_instance_;
};
// -------------------------------------------------------------------

class ScalarInt : public ::google::protobuf::Message {
 public:
  ScalarInt();
  virtual ~ScalarInt();
  
  ScalarInt(const ScalarInt& from);
  
  inline ScalarInt& operator=(const ScalarInt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScalarInt& default_instance();
  
  void Swap(ScalarInt* other);
  
  // implements Message ----------------------------------------------
  
  ScalarInt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScalarInt& from);
  void MergeFrom(const ScalarInt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 secondsintoyear = 1;
  inline bool has_secondsintoyear() const;
  inline void clear_secondsintoyear();
  static const int kSecondsintoyearFieldNumber = 1;
  inline ::google::protobuf::uint32 secondsintoyear() const;
  inline void set_secondsintoyear(::google::protobuf::uint32 value);
  
  // required uint32 nano = 2;
  inline bool has_nano() const;
  inline void clear_nano();
  static const int kNanoFieldNumber = 2;
  inline ::google::protobuf::uint32 nano() const;
  inline void set_nano(::google::protobuf::uint32 value);
  
  // required sfixed32 val = 3;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline ::google::protobuf::int32 val() const;
  inline void set_val(::google::protobuf::int32 value);
  
  // optional int32 severity = 4 [default = 0];
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 4;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);
  
  // optional int32 status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional uint32 repeatcount = 6;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatcountFieldNumber = 6;
  inline ::google::protobuf::uint32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::uint32 value);
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  inline int fieldvalues_size() const;
  inline void clear_fieldvalues();
  static const int kFieldvaluesFieldNumber = 7;
  inline const ::EPICS::FieldValue& fieldvalues(int index) const;
  inline ::EPICS::FieldValue* mutable_fieldvalues(int index);
  inline ::EPICS::FieldValue* add_fieldvalues();
  inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  
  // optional bool fieldactualchange = 8;
  inline bool has_fieldactualchange() const;
  inline void clear_fieldactualchange();
  static const int kFieldactualchangeFieldNumber = 8;
  inline bool fieldactualchange() const;
  inline void set_fieldactualchange(bool value);
  
  // @@protoc_insertion_point(class_scope:EPICS.ScalarInt)
 private:
  inline void set_has_secondsintoyear();
  inline void clear_has_secondsintoyear();
  inline void set_has_nano();
  inline void clear_has_nano();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_fieldactualchange();
  inline void clear_has_fieldactualchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 secondsintoyear_;
  ::google::protobuf::uint32 nano_;
  ::google::protobuf::int32 val_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::uint32 repeatcount_;
  ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  bool fieldactualchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static ScalarInt* default_instance_;
};
// -------------------------------------------------------------------

class ScalarEnum : public ::google::protobuf::Message {
 public:
  ScalarEnum();
  virtual ~ScalarEnum();
  
  ScalarEnum(const ScalarEnum& from);
  
  inline ScalarEnum& operator=(const ScalarEnum& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScalarEnum& default_instance();
  
  void Swap(ScalarEnum* other);
  
  // implements Message ----------------------------------------------
  
  ScalarEnum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScalarEnum& from);
  void MergeFrom(const ScalarEnum& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 secondsintoyear = 1;
  inline bool has_secondsintoyear() const;
  inline void clear_secondsintoyear();
  static const int kSecondsintoyearFieldNumber = 1;
  inline ::google::protobuf::uint32 secondsintoyear() const;
  inline void set_secondsintoyear(::google::protobuf::uint32 value);
  
  // required uint32 nano = 2;
  inline bool has_nano() const;
  inline void clear_nano();
  static const int kNanoFieldNumber = 2;
  inline ::google::protobuf::uint32 nano() const;
  inline void set_nano(::google::protobuf::uint32 value);
  
  // required sint32 val = 3;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline ::google::protobuf::int32 val() const;
  inline void set_val(::google::protobuf::int32 value);
  
  // optional int32 severity = 4 [default = 0];
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 4;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);
  
  // optional int32 status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional uint32 repeatcount = 6;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatcountFieldNumber = 6;
  inline ::google::protobuf::uint32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::uint32 value);
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  inline int fieldvalues_size() const;
  inline void clear_fieldvalues();
  static const int kFieldvaluesFieldNumber = 7;
  inline const ::EPICS::FieldValue& fieldvalues(int index) const;
  inline ::EPICS::FieldValue* mutable_fieldvalues(int index);
  inline ::EPICS::FieldValue* add_fieldvalues();
  inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  
  // optional bool fieldactualchange = 8;
  inline bool has_fieldactualchange() const;
  inline void clear_fieldactualchange();
  static const int kFieldactualchangeFieldNumber = 8;
  inline bool fieldactualchange() const;
  inline void set_fieldactualchange(bool value);
  
  // @@protoc_insertion_point(class_scope:EPICS.ScalarEnum)
 private:
  inline void set_has_secondsintoyear();
  inline void clear_has_secondsintoyear();
  inline void set_has_nano();
  inline void clear_has_nano();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_fieldactualchange();
  inline void clear_has_fieldactualchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 secondsintoyear_;
  ::google::protobuf::uint32 nano_;
  ::google::protobuf::int32 val_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::uint32 repeatcount_;
  ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  bool fieldactualchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static ScalarEnum* default_instance_;
};
// -------------------------------------------------------------------

class ScalarFloat : public ::google::protobuf::Message {
 public:
  ScalarFloat();
  virtual ~ScalarFloat();
  
  ScalarFloat(const ScalarFloat& from);
  
  inline ScalarFloat& operator=(const ScalarFloat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScalarFloat& default_instance();
  
  void Swap(ScalarFloat* other);
  
  // implements Message ----------------------------------------------
  
  ScalarFloat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScalarFloat& from);
  void MergeFrom(const ScalarFloat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 secondsintoyear = 1;
  inline bool has_secondsintoyear() const;
  inline void clear_secondsintoyear();
  static const int kSecondsintoyearFieldNumber = 1;
  inline ::google::protobuf::uint32 secondsintoyear() const;
  inline void set_secondsintoyear(::google::protobuf::uint32 value);
  
  // required uint32 nano = 2;
  inline bool has_nano() const;
  inline void clear_nano();
  static const int kNanoFieldNumber = 2;
  inline ::google::protobuf::uint32 nano() const;
  inline void set_nano(::google::protobuf::uint32 value);
  
  // required float val = 3;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline float val() const;
  inline void set_val(float value);
  
  // optional int32 severity = 4 [default = 0];
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 4;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);
  
  // optional int32 status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional uint32 repeatcount = 6;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatcountFieldNumber = 6;
  inline ::google::protobuf::uint32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::uint32 value);
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  inline int fieldvalues_size() const;
  inline void clear_fieldvalues();
  static const int kFieldvaluesFieldNumber = 7;
  inline const ::EPICS::FieldValue& fieldvalues(int index) const;
  inline ::EPICS::FieldValue* mutable_fieldvalues(int index);
  inline ::EPICS::FieldValue* add_fieldvalues();
  inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  
  // optional bool fieldactualchange = 8;
  inline bool has_fieldactualchange() const;
  inline void clear_fieldactualchange();
  static const int kFieldactualchangeFieldNumber = 8;
  inline bool fieldactualchange() const;
  inline void set_fieldactualchange(bool value);
  
  // @@protoc_insertion_point(class_scope:EPICS.ScalarFloat)
 private:
  inline void set_has_secondsintoyear();
  inline void clear_has_secondsintoyear();
  inline void set_has_nano();
  inline void clear_has_nano();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_fieldactualchange();
  inline void clear_has_fieldactualchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 secondsintoyear_;
  ::google::protobuf::uint32 nano_;
  float val_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::uint32 repeatcount_;
  ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  bool fieldactualchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static ScalarFloat* default_instance_;
};
// -------------------------------------------------------------------

class ScalarDouble : public ::google::protobuf::Message {
 public:
  ScalarDouble();
  virtual ~ScalarDouble();
  
  ScalarDouble(const ScalarDouble& from);
  
  inline ScalarDouble& operator=(const ScalarDouble& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScalarDouble& default_instance();
  
  void Swap(ScalarDouble* other);
  
  // implements Message ----------------------------------------------
  
  ScalarDouble* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScalarDouble& from);
  void MergeFrom(const ScalarDouble& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 secondsintoyear = 1;
  inline bool has_secondsintoyear() const;
  inline void clear_secondsintoyear();
  static const int kSecondsintoyearFieldNumber = 1;
  inline ::google::protobuf::uint32 secondsintoyear() const;
  inline void set_secondsintoyear(::google::protobuf::uint32 value);
  
  // required uint32 nano = 2;
  inline bool has_nano() const;
  inline void clear_nano();
  static const int kNanoFieldNumber = 2;
  inline ::google::protobuf::uint32 nano() const;
  inline void set_nano(::google::protobuf::uint32 value);
  
  // required double val = 3;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline double val() const;
  inline void set_val(double value);
  
  // optional int32 severity = 4 [default = 0];
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 4;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);
  
  // optional int32 status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional uint32 repeatcount = 6;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatcountFieldNumber = 6;
  inline ::google::protobuf::uint32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::uint32 value);
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  inline int fieldvalues_size() const;
  inline void clear_fieldvalues();
  static const int kFieldvaluesFieldNumber = 7;
  inline const ::EPICS::FieldValue& fieldvalues(int index) const;
  inline ::EPICS::FieldValue* mutable_fieldvalues(int index);
  inline ::EPICS::FieldValue* add_fieldvalues();
  inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  
  // optional bool fieldactualchange = 8;
  inline bool has_fieldactualchange() const;
  inline void clear_fieldactualchange();
  static const int kFieldactualchangeFieldNumber = 8;
  inline bool fieldactualchange() const;
  inline void set_fieldactualchange(bool value);
  
  // @@protoc_insertion_point(class_scope:EPICS.ScalarDouble)
 private:
  inline void set_has_secondsintoyear();
  inline void clear_has_secondsintoyear();
  inline void set_has_nano();
  inline void clear_has_nano();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_fieldactualchange();
  inline void clear_has_fieldactualchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 secondsintoyear_;
  ::google::protobuf::uint32 nano_;
  double val_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::google::protobuf::uint32 repeatcount_;
  bool fieldactualchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static ScalarDouble* default_instance_;
};
// -------------------------------------------------------------------

class VectorString : public ::google::protobuf::Message {
 public:
  VectorString();
  virtual ~VectorString();
  
  VectorString(const VectorString& from);
  
  inline VectorString& operator=(const VectorString& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorString& default_instance();
  
  void Swap(VectorString* other);
  
  // implements Message ----------------------------------------------
  
  VectorString* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorString& from);
  void MergeFrom(const VectorString& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 secondsintoyear = 1;
  inline bool has_secondsintoyear() const;
  inline void clear_secondsintoyear();
  static const int kSecondsintoyearFieldNumber = 1;
  inline ::google::protobuf::uint32 secondsintoyear() const;
  inline void set_secondsintoyear(::google::protobuf::uint32 value);
  
  // required uint32 nano = 2;
  inline bool has_nano() const;
  inline void clear_nano();
  static const int kNanoFieldNumber = 2;
  inline ::google::protobuf::uint32 nano() const;
  inline void set_nano(::google::protobuf::uint32 value);
  
  // repeated string val = 3;
  inline int val_size() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline const ::std::string& val(int index) const;
  inline ::std::string* mutable_val(int index);
  inline void set_val(int index, const ::std::string& value);
  inline void set_val(int index, const char* value);
  inline void set_val(int index, const char* value, size_t size);
  inline ::std::string* add_val();
  inline void add_val(const ::std::string& value);
  inline void add_val(const char* value);
  inline void add_val(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& val() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_val();
  
  // optional int32 severity = 4 [default = 0];
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 4;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);
  
  // optional int32 status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional uint32 repeatcount = 6;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatcountFieldNumber = 6;
  inline ::google::protobuf::uint32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::uint32 value);
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  inline int fieldvalues_size() const;
  inline void clear_fieldvalues();
  static const int kFieldvaluesFieldNumber = 7;
  inline const ::EPICS::FieldValue& fieldvalues(int index) const;
  inline ::EPICS::FieldValue* mutable_fieldvalues(int index);
  inline ::EPICS::FieldValue* add_fieldvalues();
  inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  
  // optional bool fieldactualchange = 8;
  inline bool has_fieldactualchange() const;
  inline void clear_fieldactualchange();
  static const int kFieldactualchangeFieldNumber = 8;
  inline bool fieldactualchange() const;
  inline void set_fieldactualchange(bool value);
  
  // @@protoc_insertion_point(class_scope:EPICS.VectorString)
 private:
  inline void set_has_secondsintoyear();
  inline void clear_has_secondsintoyear();
  inline void set_has_nano();
  inline void clear_has_nano();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_fieldactualchange();
  inline void clear_has_fieldactualchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 secondsintoyear_;
  ::google::protobuf::uint32 nano_;
  ::google::protobuf::RepeatedPtrField< ::std::string> val_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::google::protobuf::uint32 repeatcount_;
  bool fieldactualchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static VectorString* default_instance_;
};
// -------------------------------------------------------------------

class VectorChar : public ::google::protobuf::Message {
 public:
  VectorChar();
  virtual ~VectorChar();
  
  VectorChar(const VectorChar& from);
  
  inline VectorChar& operator=(const VectorChar& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorChar& default_instance();
  
  void Swap(VectorChar* other);
  
  // implements Message ----------------------------------------------
  
  VectorChar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorChar& from);
  void MergeFrom(const VectorChar& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 secondsintoyear = 1;
  inline bool has_secondsintoyear() const;
  inline void clear_secondsintoyear();
  static const int kSecondsintoyearFieldNumber = 1;
  inline ::google::protobuf::uint32 secondsintoyear() const;
  inline void set_secondsintoyear(::google::protobuf::uint32 value);
  
  // required uint32 nano = 2;
  inline bool has_nano() const;
  inline void clear_nano();
  static const int kNanoFieldNumber = 2;
  inline ::google::protobuf::uint32 nano() const;
  inline void set_nano(::google::protobuf::uint32 value);
  
  // required bytes val = 3;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const void* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  
  // optional int32 severity = 4 [default = 0];
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 4;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);
  
  // optional int32 status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional uint32 repeatcount = 6;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatcountFieldNumber = 6;
  inline ::google::protobuf::uint32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::uint32 value);
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  inline int fieldvalues_size() const;
  inline void clear_fieldvalues();
  static const int kFieldvaluesFieldNumber = 7;
  inline const ::EPICS::FieldValue& fieldvalues(int index) const;
  inline ::EPICS::FieldValue* mutable_fieldvalues(int index);
  inline ::EPICS::FieldValue* add_fieldvalues();
  inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  
  // optional bool fieldactualchange = 8;
  inline bool has_fieldactualchange() const;
  inline void clear_fieldactualchange();
  static const int kFieldactualchangeFieldNumber = 8;
  inline bool fieldactualchange() const;
  inline void set_fieldactualchange(bool value);
  
  // @@protoc_insertion_point(class_scope:EPICS.VectorChar)
 private:
  inline void set_has_secondsintoyear();
  inline void clear_has_secondsintoyear();
  inline void set_has_nano();
  inline void clear_has_nano();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_fieldactualchange();
  inline void clear_has_fieldactualchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 secondsintoyear_;
  ::google::protobuf::uint32 nano_;
  ::std::string* val_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::google::protobuf::uint32 repeatcount_;
  bool fieldactualchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static VectorChar* default_instance_;
};
// -------------------------------------------------------------------

class VectorShort : public ::google::protobuf::Message {
 public:
  VectorShort();
  virtual ~VectorShort();
  
  VectorShort(const VectorShort& from);
  
  inline VectorShort& operator=(const VectorShort& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorShort& default_instance();
  
  void Swap(VectorShort* other);
  
  // implements Message ----------------------------------------------
  
  VectorShort* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorShort& from);
  void MergeFrom(const VectorShort& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 secondsintoyear = 1;
  inline bool has_secondsintoyear() const;
  inline void clear_secondsintoyear();
  static const int kSecondsintoyearFieldNumber = 1;
  inline ::google::protobuf::uint32 secondsintoyear() const;
  inline void set_secondsintoyear(::google::protobuf::uint32 value);
  
  // required uint32 nano = 2;
  inline bool has_nano() const;
  inline void clear_nano();
  static const int kNanoFieldNumber = 2;
  inline ::google::protobuf::uint32 nano() const;
  inline void set_nano(::google::protobuf::uint32 value);
  
  // repeated sint32 val = 3 [packed = true];
  inline int val_size() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline ::google::protobuf::int32 val(int index) const;
  inline void set_val(int index, ::google::protobuf::int32 value);
  inline void add_val(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      val() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_val();
  
  // optional int32 severity = 4 [default = 0];
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 4;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);
  
  // optional int32 status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional uint32 repeatcount = 6;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatcountFieldNumber = 6;
  inline ::google::protobuf::uint32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::uint32 value);
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  inline int fieldvalues_size() const;
  inline void clear_fieldvalues();
  static const int kFieldvaluesFieldNumber = 7;
  inline const ::EPICS::FieldValue& fieldvalues(int index) const;
  inline ::EPICS::FieldValue* mutable_fieldvalues(int index);
  inline ::EPICS::FieldValue* add_fieldvalues();
  inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  
  // optional bool fieldactualchange = 8;
  inline bool has_fieldactualchange() const;
  inline void clear_fieldactualchange();
  static const int kFieldactualchangeFieldNumber = 8;
  inline bool fieldactualchange() const;
  inline void set_fieldactualchange(bool value);
  
  // @@protoc_insertion_point(class_scope:EPICS.VectorShort)
 private:
  inline void set_has_secondsintoyear();
  inline void clear_has_secondsintoyear();
  inline void set_has_nano();
  inline void clear_has_nano();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_fieldactualchange();
  inline void clear_has_fieldactualchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 secondsintoyear_;
  ::google::protobuf::uint32 nano_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > val_;
  mutable int _val_cached_byte_size_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::google::protobuf::uint32 repeatcount_;
  bool fieldactualchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static VectorShort* default_instance_;
};
// -------------------------------------------------------------------

class VectorInt : public ::google::protobuf::Message {
 public:
  VectorInt();
  virtual ~VectorInt();
  
  VectorInt(const VectorInt& from);
  
  inline VectorInt& operator=(const VectorInt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorInt& default_instance();
  
  void Swap(VectorInt* other);
  
  // implements Message ----------------------------------------------
  
  VectorInt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorInt& from);
  void MergeFrom(const VectorInt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 secondsintoyear = 1;
  inline bool has_secondsintoyear() const;
  inline void clear_secondsintoyear();
  static const int kSecondsintoyearFieldNumber = 1;
  inline ::google::protobuf::uint32 secondsintoyear() const;
  inline void set_secondsintoyear(::google::protobuf::uint32 value);
  
  // required uint32 nano = 2;
  inline bool has_nano() const;
  inline void clear_nano();
  static const int kNanoFieldNumber = 2;
  inline ::google::protobuf::uint32 nano() const;
  inline void set_nano(::google::protobuf::uint32 value);
  
  // repeated sfixed32 val = 3 [packed = true];
  inline int val_size() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline ::google::protobuf::int32 val(int index) const;
  inline void set_val(int index, ::google::protobuf::int32 value);
  inline void add_val(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      val() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_val();
  
  // optional int32 severity = 4 [default = 0];
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 4;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);
  
  // optional int32 status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional uint32 repeatcount = 6;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatcountFieldNumber = 6;
  inline ::google::protobuf::uint32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::uint32 value);
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  inline int fieldvalues_size() const;
  inline void clear_fieldvalues();
  static const int kFieldvaluesFieldNumber = 7;
  inline const ::EPICS::FieldValue& fieldvalues(int index) const;
  inline ::EPICS::FieldValue* mutable_fieldvalues(int index);
  inline ::EPICS::FieldValue* add_fieldvalues();
  inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  
  // optional bool fieldactualchange = 8;
  inline bool has_fieldactualchange() const;
  inline void clear_fieldactualchange();
  static const int kFieldactualchangeFieldNumber = 8;
  inline bool fieldactualchange() const;
  inline void set_fieldactualchange(bool value);
  
  // @@protoc_insertion_point(class_scope:EPICS.VectorInt)
 private:
  inline void set_has_secondsintoyear();
  inline void clear_has_secondsintoyear();
  inline void set_has_nano();
  inline void clear_has_nano();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_fieldactualchange();
  inline void clear_has_fieldactualchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 secondsintoyear_;
  ::google::protobuf::uint32 nano_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > val_;
  mutable int _val_cached_byte_size_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::google::protobuf::uint32 repeatcount_;
  bool fieldactualchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static VectorInt* default_instance_;
};
// -------------------------------------------------------------------

class VectorEnum : public ::google::protobuf::Message {
 public:
  VectorEnum();
  virtual ~VectorEnum();
  
  VectorEnum(const VectorEnum& from);
  
  inline VectorEnum& operator=(const VectorEnum& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorEnum& default_instance();
  
  void Swap(VectorEnum* other);
  
  // implements Message ----------------------------------------------
  
  VectorEnum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorEnum& from);
  void MergeFrom(const VectorEnum& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 secondsintoyear = 1;
  inline bool has_secondsintoyear() const;
  inline void clear_secondsintoyear();
  static const int kSecondsintoyearFieldNumber = 1;
  inline ::google::protobuf::uint32 secondsintoyear() const;
  inline void set_secondsintoyear(::google::protobuf::uint32 value);
  
  // required uint32 nano = 2;
  inline bool has_nano() const;
  inline void clear_nano();
  static const int kNanoFieldNumber = 2;
  inline ::google::protobuf::uint32 nano() const;
  inline void set_nano(::google::protobuf::uint32 value);
  
  // repeated sint32 val = 3 [packed = true];
  inline int val_size() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline ::google::protobuf::int32 val(int index) const;
  inline void set_val(int index, ::google::protobuf::int32 value);
  inline void add_val(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      val() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_val();
  
  // optional int32 severity = 4 [default = 0];
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 4;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);
  
  // optional int32 status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional uint32 repeatcount = 6;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatcountFieldNumber = 6;
  inline ::google::protobuf::uint32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::uint32 value);
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  inline int fieldvalues_size() const;
  inline void clear_fieldvalues();
  static const int kFieldvaluesFieldNumber = 7;
  inline const ::EPICS::FieldValue& fieldvalues(int index) const;
  inline ::EPICS::FieldValue* mutable_fieldvalues(int index);
  inline ::EPICS::FieldValue* add_fieldvalues();
  inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  
  // optional bool fieldactualchange = 8;
  inline bool has_fieldactualchange() const;
  inline void clear_fieldactualchange();
  static const int kFieldactualchangeFieldNumber = 8;
  inline bool fieldactualchange() const;
  inline void set_fieldactualchange(bool value);
  
  // @@protoc_insertion_point(class_scope:EPICS.VectorEnum)
 private:
  inline void set_has_secondsintoyear();
  inline void clear_has_secondsintoyear();
  inline void set_has_nano();
  inline void clear_has_nano();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_fieldactualchange();
  inline void clear_has_fieldactualchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 secondsintoyear_;
  ::google::protobuf::uint32 nano_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > val_;
  mutable int _val_cached_byte_size_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::google::protobuf::uint32 repeatcount_;
  bool fieldactualchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static VectorEnum* default_instance_;
};
// -------------------------------------------------------------------

class VectorFloat : public ::google::protobuf::Message {
 public:
  VectorFloat();
  virtual ~VectorFloat();
  
  VectorFloat(const VectorFloat& from);
  
  inline VectorFloat& operator=(const VectorFloat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorFloat& default_instance();
  
  void Swap(VectorFloat* other);
  
  // implements Message ----------------------------------------------
  
  VectorFloat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorFloat& from);
  void MergeFrom(const VectorFloat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 secondsintoyear = 1;
  inline bool has_secondsintoyear() const;
  inline void clear_secondsintoyear();
  static const int kSecondsintoyearFieldNumber = 1;
  inline ::google::protobuf::uint32 secondsintoyear() const;
  inline void set_secondsintoyear(::google::protobuf::uint32 value);
  
  // required uint32 nano = 2;
  inline bool has_nano() const;
  inline void clear_nano();
  static const int kNanoFieldNumber = 2;
  inline ::google::protobuf::uint32 nano() const;
  inline void set_nano(::google::protobuf::uint32 value);
  
  // repeated float val = 3 [packed = true];
  inline int val_size() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline float val(int index) const;
  inline void set_val(int index, float value);
  inline void add_val(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      val() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_val();
  
  // optional int32 severity = 4 [default = 0];
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 4;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);
  
  // optional int32 status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional uint32 repeatcount = 6;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatcountFieldNumber = 6;
  inline ::google::protobuf::uint32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::uint32 value);
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  inline int fieldvalues_size() const;
  inline void clear_fieldvalues();
  static const int kFieldvaluesFieldNumber = 7;
  inline const ::EPICS::FieldValue& fieldvalues(int index) const;
  inline ::EPICS::FieldValue* mutable_fieldvalues(int index);
  inline ::EPICS::FieldValue* add_fieldvalues();
  inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  
  // optional bool fieldactualchange = 8;
  inline bool has_fieldactualchange() const;
  inline void clear_fieldactualchange();
  static const int kFieldactualchangeFieldNumber = 8;
  inline bool fieldactualchange() const;
  inline void set_fieldactualchange(bool value);
  
  // @@protoc_insertion_point(class_scope:EPICS.VectorFloat)
 private:
  inline void set_has_secondsintoyear();
  inline void clear_has_secondsintoyear();
  inline void set_has_nano();
  inline void clear_has_nano();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_fieldactualchange();
  inline void clear_has_fieldactualchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 secondsintoyear_;
  ::google::protobuf::uint32 nano_;
  ::google::protobuf::RepeatedField< float > val_;
  mutable int _val_cached_byte_size_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::google::protobuf::uint32 repeatcount_;
  bool fieldactualchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static VectorFloat* default_instance_;
};
// -------------------------------------------------------------------

class VectorDouble : public ::google::protobuf::Message {
 public:
  VectorDouble();
  virtual ~VectorDouble();
  
  VectorDouble(const VectorDouble& from);
  
  inline VectorDouble& operator=(const VectorDouble& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorDouble& default_instance();
  
  void Swap(VectorDouble* other);
  
  // implements Message ----------------------------------------------
  
  VectorDouble* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorDouble& from);
  void MergeFrom(const VectorDouble& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 secondsintoyear = 1;
  inline bool has_secondsintoyear() const;
  inline void clear_secondsintoyear();
  static const int kSecondsintoyearFieldNumber = 1;
  inline ::google::protobuf::uint32 secondsintoyear() const;
  inline void set_secondsintoyear(::google::protobuf::uint32 value);
  
  // required uint32 nano = 2;
  inline bool has_nano() const;
  inline void clear_nano();
  static const int kNanoFieldNumber = 2;
  inline ::google::protobuf::uint32 nano() const;
  inline void set_nano(::google::protobuf::uint32 value);
  
  // repeated double val = 3 [packed = true];
  inline int val_size() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline double val(int index) const;
  inline void set_val(int index, double value);
  inline void add_val(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      val() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_val();
  
  // optional int32 severity = 4 [default = 0];
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 4;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);
  
  // optional int32 status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional uint32 repeatcount = 6;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatcountFieldNumber = 6;
  inline ::google::protobuf::uint32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::uint32 value);
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  inline int fieldvalues_size() const;
  inline void clear_fieldvalues();
  static const int kFieldvaluesFieldNumber = 7;
  inline const ::EPICS::FieldValue& fieldvalues(int index) const;
  inline ::EPICS::FieldValue* mutable_fieldvalues(int index);
  inline ::EPICS::FieldValue* add_fieldvalues();
  inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  
  // optional bool fieldactualchange = 8;
  inline bool has_fieldactualchange() const;
  inline void clear_fieldactualchange();
  static const int kFieldactualchangeFieldNumber = 8;
  inline bool fieldactualchange() const;
  inline void set_fieldactualchange(bool value);
  
  // @@protoc_insertion_point(class_scope:EPICS.VectorDouble)
 private:
  inline void set_has_secondsintoyear();
  inline void clear_has_secondsintoyear();
  inline void set_has_nano();
  inline void clear_has_nano();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_fieldactualchange();
  inline void clear_has_fieldactualchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 secondsintoyear_;
  ::google::protobuf::uint32 nano_;
  ::google::protobuf::RepeatedField< double > val_;
  mutable int _val_cached_byte_size_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::google::protobuf::uint32 repeatcount_;
  bool fieldactualchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static VectorDouble* default_instance_;
};
// -------------------------------------------------------------------

class V4GenericBytes : public ::google::protobuf::Message {
 public:
  V4GenericBytes();
  virtual ~V4GenericBytes();
  
  V4GenericBytes(const V4GenericBytes& from);
  
  inline V4GenericBytes& operator=(const V4GenericBytes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const V4GenericBytes& default_instance();
  
  void Swap(V4GenericBytes* other);
  
  // implements Message ----------------------------------------------
  
  V4GenericBytes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const V4GenericBytes& from);
  void MergeFrom(const V4GenericBytes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 secondsintoyear = 1;
  inline bool has_secondsintoyear() const;
  inline void clear_secondsintoyear();
  static const int kSecondsintoyearFieldNumber = 1;
  inline ::google::protobuf::uint32 secondsintoyear() const;
  inline void set_secondsintoyear(::google::protobuf::uint32 value);
  
  // required uint32 nano = 2;
  inline bool has_nano() const;
  inline void clear_nano();
  static const int kNanoFieldNumber = 2;
  inline ::google::protobuf::uint32 nano() const;
  inline void set_nano(::google::protobuf::uint32 value);
  
  // required bytes val = 3;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const void* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  
  // optional int32 severity = 4 [default = 0];
  inline bool has_severity() const;
  inline void clear_severity();
  static const int kSeverityFieldNumber = 4;
  inline ::google::protobuf::int32 severity() const;
  inline void set_severity(::google::protobuf::int32 value);
  
  // optional int32 status = 5 [default = 0];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional uint32 repeatcount = 6;
  inline bool has_repeatcount() const;
  inline void clear_repeatcount();
  static const int kRepeatcountFieldNumber = 6;
  inline ::google::protobuf::uint32 repeatcount() const;
  inline void set_repeatcount(::google::protobuf::uint32 value);
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  inline int fieldvalues_size() const;
  inline void clear_fieldvalues();
  static const int kFieldvaluesFieldNumber = 7;
  inline const ::EPICS::FieldValue& fieldvalues(int index) const;
  inline ::EPICS::FieldValue* mutable_fieldvalues(int index);
  inline ::EPICS::FieldValue* add_fieldvalues();
  inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  
  // optional bool fieldactualchange = 8;
  inline bool has_fieldactualchange() const;
  inline void clear_fieldactualchange();
  static const int kFieldactualchangeFieldNumber = 8;
  inline bool fieldactualchange() const;
  inline void set_fieldactualchange(bool value);
  
  // @@protoc_insertion_point(class_scope:EPICS.V4GenericBytes)
 private:
  inline void set_has_secondsintoyear();
  inline void clear_has_secondsintoyear();
  inline void set_has_nano();
  inline void clear_has_nano();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_severity();
  inline void clear_has_severity();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_repeatcount();
  inline void clear_has_repeatcount();
  inline void set_has_fieldactualchange();
  inline void clear_has_fieldactualchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 secondsintoyear_;
  ::google::protobuf::uint32 nano_;
  ::std::string* val_;
  ::google::protobuf::int32 severity_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::google::protobuf::uint32 repeatcount_;
  bool fieldactualchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static V4GenericBytes* default_instance_;
};
// -------------------------------------------------------------------

class PayloadInfo : public ::google::protobuf::Message {
 public:
  PayloadInfo();
  virtual ~PayloadInfo();
  
  PayloadInfo(const PayloadInfo& from);
  
  inline PayloadInfo& operator=(const PayloadInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PayloadInfo& default_instance();
  
  void Swap(PayloadInfo* other);
  
  // implements Message ----------------------------------------------
  
  PayloadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PayloadInfo& from);
  void MergeFrom(const PayloadInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .EPICS.PayloadType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline EPICS::PayloadType type() const;
  inline void set_type(EPICS::PayloadType value);
  
  // required string pvname = 2;
  inline bool has_pvname() const;
  inline void clear_pvname();
  static const int kPvnameFieldNumber = 2;
  inline const ::std::string& pvname() const;
  inline void set_pvname(const ::std::string& value);
  inline void set_pvname(const char* value);
  inline void set_pvname(const char* value, size_t size);
  inline ::std::string* mutable_pvname();
  inline ::std::string* release_pvname();
  
  // required int32 year = 3;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 3;
  inline ::google::protobuf::int32 year() const;
  inline void set_year(::google::protobuf::int32 value);
  
  // optional int32 elementCount = 4;
  inline bool has_elementcount() const;
  inline void clear_elementcount();
  static const int kElementCountFieldNumber = 4;
  inline ::google::protobuf::int32 elementcount() const;
  inline void set_elementcount(::google::protobuf::int32 value);
  
  // optional double unused00 = 5;
  inline bool has_unused00() const;
  inline void clear_unused00();
  static const int kUnused00FieldNumber = 5;
  inline double unused00() const;
  inline void set_unused00(double value);
  
  // optional double unused01 = 6;
  inline bool has_unused01() const;
  inline void clear_unused01();
  static const int kUnused01FieldNumber = 6;
  inline double unused01() const;
  inline void set_unused01(double value);
  
  // optional double unused02 = 7;
  inline bool has_unused02() const;
  inline void clear_unused02();
  static const int kUnused02FieldNumber = 7;
  inline double unused02() const;
  inline void set_unused02(double value);
  
  // optional double unused03 = 8;
  inline bool has_unused03() const;
  inline void clear_unused03();
  static const int kUnused03FieldNumber = 8;
  inline double unused03() const;
  inline void set_unused03(double value);
  
  // optional double unused04 = 9;
  inline bool has_unused04() const;
  inline void clear_unused04();
  static const int kUnused04FieldNumber = 9;
  inline double unused04() const;
  inline void set_unused04(double value);
  
  // optional double unused05 = 10;
  inline bool has_unused05() const;
  inline void clear_unused05();
  static const int kUnused05FieldNumber = 10;
  inline double unused05() const;
  inline void set_unused05(double value);
  
  // optional double unused06 = 11;
  inline bool has_unused06() const;
  inline void clear_unused06();
  static const int kUnused06FieldNumber = 11;
  inline double unused06() const;
  inline void set_unused06(double value);
  
  // optional double unused07 = 12;
  inline bool has_unused07() const;
  inline void clear_unused07();
  static const int kUnused07FieldNumber = 12;
  inline double unused07() const;
  inline void set_unused07(double value);
  
  // optional double unused08 = 13;
  inline bool has_unused08() const;
  inline void clear_unused08();
  static const int kUnused08FieldNumber = 13;
  inline double unused08() const;
  inline void set_unused08(double value);
  
  // optional string unused09 = 14;
  inline bool has_unused09() const;
  inline void clear_unused09();
  static const int kUnused09FieldNumber = 14;
  inline const ::std::string& unused09() const;
  inline void set_unused09(const ::std::string& value);
  inline void set_unused09(const char* value);
  inline void set_unused09(const char* value, size_t size);
  inline ::std::string* mutable_unused09();
  inline ::std::string* release_unused09();
  
  // repeated .EPICS.FieldValue headers = 15;
  inline int headers_size() const;
  inline void clear_headers();
  static const int kHeadersFieldNumber = 15;
  inline const ::EPICS::FieldValue& headers(int index) const;
  inline ::EPICS::FieldValue* mutable_headers(int index);
  inline ::EPICS::FieldValue* add_headers();
  inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
      headers() const;
  inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_headers();
  
  // @@protoc_insertion_point(class_scope:EPICS.PayloadInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pvname();
  inline void clear_has_pvname();
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_elementcount();
  inline void clear_has_elementcount();
  inline void set_has_unused00();
  inline void clear_has_unused00();
  inline void set_has_unused01();
  inline void clear_has_unused01();
  inline void set_has_unused02();
  inline void clear_has_unused02();
  inline void set_has_unused03();
  inline void clear_has_unused03();
  inline void set_has_unused04();
  inline void clear_has_unused04();
  inline void set_has_unused05();
  inline void clear_has_unused05();
  inline void set_has_unused06();
  inline void clear_has_unused06();
  inline void set_has_unused07();
  inline void clear_has_unused07();
  inline void set_has_unused08();
  inline void clear_has_unused08();
  inline void set_has_unused09();
  inline void clear_has_unused09();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* pvname_;
  int type_;
  ::google::protobuf::int32 year_;
  double unused00_;
  double unused01_;
  double unused02_;
  double unused03_;
  double unused04_;
  double unused05_;
  double unused06_;
  double unused07_;
  double unused08_;
  ::std::string* unused09_;
  ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue > headers_;
  ::google::protobuf::int32 elementcount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_EPICSEvent_2eproto();
  friend void protobuf_AssignDesc_EPICSEvent_2eproto();
  friend void protobuf_ShutdownFile_EPICSEvent_2eproto();
  
  void InitAsDefaultInstance();
  static PayloadInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// FieldValue

// required string name = 1;
inline bool FieldValue::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldValue::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FieldValue::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FieldValue::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FieldValue::name() const {
  return *name_;
}
inline void FieldValue::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FieldValue::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FieldValue::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FieldValue::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FieldValue::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string val = 2;
inline bool FieldValue::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldValue::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FieldValue::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FieldValue::clear_val() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& FieldValue::val() const {
  return *val_;
}
inline void FieldValue::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void FieldValue::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void FieldValue::set_val(const char* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FieldValue::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  return val_;
}
inline ::std::string* FieldValue::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ScalarString

// required uint32 secondsintoyear = 1;
inline bool ScalarString::has_secondsintoyear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScalarString::set_has_secondsintoyear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScalarString::clear_has_secondsintoyear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScalarString::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  clear_has_secondsintoyear();
}
inline ::google::protobuf::uint32 ScalarString::secondsintoyear() const {
  return secondsintoyear_;
}
inline void ScalarString::set_secondsintoyear(::google::protobuf::uint32 value) {
  set_has_secondsintoyear();
  secondsintoyear_ = value;
}

// required uint32 nano = 2;
inline bool ScalarString::has_nano() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScalarString::set_has_nano() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScalarString::clear_has_nano() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScalarString::clear_nano() {
  nano_ = 0u;
  clear_has_nano();
}
inline ::google::protobuf::uint32 ScalarString::nano() const {
  return nano_;
}
inline void ScalarString::set_nano(::google::protobuf::uint32 value) {
  set_has_nano();
  nano_ = value;
}

// required string val = 3;
inline bool ScalarString::has_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScalarString::set_has_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScalarString::clear_has_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScalarString::clear_val() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& ScalarString::val() const {
  return *val_;
}
inline void ScalarString::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void ScalarString::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void ScalarString::set_val(const char* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScalarString::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  return val_;
}
inline ::std::string* ScalarString::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 severity = 4 [default = 0];
inline bool ScalarString::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScalarString::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScalarString::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScalarString::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 ScalarString::severity() const {
  return severity_;
}
inline void ScalarString::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
}

// optional int32 status = 5 [default = 0];
inline bool ScalarString::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScalarString::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScalarString::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScalarString::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 ScalarString::status() const {
  return status_;
}
inline void ScalarString::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 repeatcount = 6;
inline bool ScalarString::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ScalarString::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ScalarString::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ScalarString::clear_repeatcount() {
  repeatcount_ = 0u;
  clear_has_repeatcount();
}
inline ::google::protobuf::uint32 ScalarString::repeatcount() const {
  return repeatcount_;
}
inline void ScalarString::set_repeatcount(::google::protobuf::uint32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int ScalarString::fieldvalues_size() const {
  return fieldvalues_.size();
}
inline void ScalarString::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline const ::EPICS::FieldValue& ScalarString::fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline ::EPICS::FieldValue* ScalarString::mutable_fieldvalues(int index) {
  return fieldvalues_.Mutable(index);
}
inline ::EPICS::FieldValue* ScalarString::add_fieldvalues() {
  return fieldvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
ScalarString::fieldvalues() const {
  return fieldvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
ScalarString::mutable_fieldvalues() {
  return &fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool ScalarString::has_fieldactualchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ScalarString::set_has_fieldactualchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ScalarString::clear_has_fieldactualchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ScalarString::clear_fieldactualchange() {
  fieldactualchange_ = false;
  clear_has_fieldactualchange();
}
inline bool ScalarString::fieldactualchange() const {
  return fieldactualchange_;
}
inline void ScalarString::set_fieldactualchange(bool value) {
  set_has_fieldactualchange();
  fieldactualchange_ = value;
}

// -------------------------------------------------------------------

// ScalarByte

// required uint32 secondsintoyear = 1;
inline bool ScalarByte::has_secondsintoyear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScalarByte::set_has_secondsintoyear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScalarByte::clear_has_secondsintoyear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScalarByte::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  clear_has_secondsintoyear();
}
inline ::google::protobuf::uint32 ScalarByte::secondsintoyear() const {
  return secondsintoyear_;
}
inline void ScalarByte::set_secondsintoyear(::google::protobuf::uint32 value) {
  set_has_secondsintoyear();
  secondsintoyear_ = value;
}

// required uint32 nano = 2;
inline bool ScalarByte::has_nano() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScalarByte::set_has_nano() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScalarByte::clear_has_nano() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScalarByte::clear_nano() {
  nano_ = 0u;
  clear_has_nano();
}
inline ::google::protobuf::uint32 ScalarByte::nano() const {
  return nano_;
}
inline void ScalarByte::set_nano(::google::protobuf::uint32 value) {
  set_has_nano();
  nano_ = value;
}

// required bytes val = 3;
inline bool ScalarByte::has_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScalarByte::set_has_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScalarByte::clear_has_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScalarByte::clear_val() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& ScalarByte::val() const {
  return *val_;
}
inline void ScalarByte::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void ScalarByte::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void ScalarByte::set_val(const void* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScalarByte::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  return val_;
}
inline ::std::string* ScalarByte::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 severity = 4 [default = 0];
inline bool ScalarByte::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScalarByte::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScalarByte::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScalarByte::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 ScalarByte::severity() const {
  return severity_;
}
inline void ScalarByte::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
}

// optional int32 status = 5 [default = 0];
inline bool ScalarByte::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScalarByte::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScalarByte::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScalarByte::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 ScalarByte::status() const {
  return status_;
}
inline void ScalarByte::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 repeatcount = 6;
inline bool ScalarByte::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ScalarByte::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ScalarByte::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ScalarByte::clear_repeatcount() {
  repeatcount_ = 0u;
  clear_has_repeatcount();
}
inline ::google::protobuf::uint32 ScalarByte::repeatcount() const {
  return repeatcount_;
}
inline void ScalarByte::set_repeatcount(::google::protobuf::uint32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int ScalarByte::fieldvalues_size() const {
  return fieldvalues_.size();
}
inline void ScalarByte::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline const ::EPICS::FieldValue& ScalarByte::fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline ::EPICS::FieldValue* ScalarByte::mutable_fieldvalues(int index) {
  return fieldvalues_.Mutable(index);
}
inline ::EPICS::FieldValue* ScalarByte::add_fieldvalues() {
  return fieldvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
ScalarByte::fieldvalues() const {
  return fieldvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
ScalarByte::mutable_fieldvalues() {
  return &fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool ScalarByte::has_fieldactualchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ScalarByte::set_has_fieldactualchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ScalarByte::clear_has_fieldactualchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ScalarByte::clear_fieldactualchange() {
  fieldactualchange_ = false;
  clear_has_fieldactualchange();
}
inline bool ScalarByte::fieldactualchange() const {
  return fieldactualchange_;
}
inline void ScalarByte::set_fieldactualchange(bool value) {
  set_has_fieldactualchange();
  fieldactualchange_ = value;
}

// -------------------------------------------------------------------

// ScalarShort

// required uint32 secondsintoyear = 1;
inline bool ScalarShort::has_secondsintoyear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScalarShort::set_has_secondsintoyear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScalarShort::clear_has_secondsintoyear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScalarShort::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  clear_has_secondsintoyear();
}
inline ::google::protobuf::uint32 ScalarShort::secondsintoyear() const {
  return secondsintoyear_;
}
inline void ScalarShort::set_secondsintoyear(::google::protobuf::uint32 value) {
  set_has_secondsintoyear();
  secondsintoyear_ = value;
}

// required uint32 nano = 2;
inline bool ScalarShort::has_nano() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScalarShort::set_has_nano() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScalarShort::clear_has_nano() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScalarShort::clear_nano() {
  nano_ = 0u;
  clear_has_nano();
}
inline ::google::protobuf::uint32 ScalarShort::nano() const {
  return nano_;
}
inline void ScalarShort::set_nano(::google::protobuf::uint32 value) {
  set_has_nano();
  nano_ = value;
}

// required sint32 val = 3;
inline bool ScalarShort::has_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScalarShort::set_has_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScalarShort::clear_has_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScalarShort::clear_val() {
  val_ = 0;
  clear_has_val();
}
inline ::google::protobuf::int32 ScalarShort::val() const {
  return val_;
}
inline void ScalarShort::set_val(::google::protobuf::int32 value) {
  set_has_val();
  val_ = value;
}

// optional int32 severity = 4 [default = 0];
inline bool ScalarShort::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScalarShort::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScalarShort::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScalarShort::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 ScalarShort::severity() const {
  return severity_;
}
inline void ScalarShort::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
}

// optional int32 status = 5 [default = 0];
inline bool ScalarShort::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScalarShort::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScalarShort::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScalarShort::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 ScalarShort::status() const {
  return status_;
}
inline void ScalarShort::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 repeatcount = 6;
inline bool ScalarShort::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ScalarShort::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ScalarShort::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ScalarShort::clear_repeatcount() {
  repeatcount_ = 0u;
  clear_has_repeatcount();
}
inline ::google::protobuf::uint32 ScalarShort::repeatcount() const {
  return repeatcount_;
}
inline void ScalarShort::set_repeatcount(::google::protobuf::uint32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int ScalarShort::fieldvalues_size() const {
  return fieldvalues_.size();
}
inline void ScalarShort::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline const ::EPICS::FieldValue& ScalarShort::fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline ::EPICS::FieldValue* ScalarShort::mutable_fieldvalues(int index) {
  return fieldvalues_.Mutable(index);
}
inline ::EPICS::FieldValue* ScalarShort::add_fieldvalues() {
  return fieldvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
ScalarShort::fieldvalues() const {
  return fieldvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
ScalarShort::mutable_fieldvalues() {
  return &fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool ScalarShort::has_fieldactualchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ScalarShort::set_has_fieldactualchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ScalarShort::clear_has_fieldactualchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ScalarShort::clear_fieldactualchange() {
  fieldactualchange_ = false;
  clear_has_fieldactualchange();
}
inline bool ScalarShort::fieldactualchange() const {
  return fieldactualchange_;
}
inline void ScalarShort::set_fieldactualchange(bool value) {
  set_has_fieldactualchange();
  fieldactualchange_ = value;
}

// -------------------------------------------------------------------

// ScalarInt

// required uint32 secondsintoyear = 1;
inline bool ScalarInt::has_secondsintoyear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScalarInt::set_has_secondsintoyear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScalarInt::clear_has_secondsintoyear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScalarInt::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  clear_has_secondsintoyear();
}
inline ::google::protobuf::uint32 ScalarInt::secondsintoyear() const {
  return secondsintoyear_;
}
inline void ScalarInt::set_secondsintoyear(::google::protobuf::uint32 value) {
  set_has_secondsintoyear();
  secondsintoyear_ = value;
}

// required uint32 nano = 2;
inline bool ScalarInt::has_nano() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScalarInt::set_has_nano() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScalarInt::clear_has_nano() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScalarInt::clear_nano() {
  nano_ = 0u;
  clear_has_nano();
}
inline ::google::protobuf::uint32 ScalarInt::nano() const {
  return nano_;
}
inline void ScalarInt::set_nano(::google::protobuf::uint32 value) {
  set_has_nano();
  nano_ = value;
}

// required sfixed32 val = 3;
inline bool ScalarInt::has_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScalarInt::set_has_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScalarInt::clear_has_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScalarInt::clear_val() {
  val_ = 0;
  clear_has_val();
}
inline ::google::protobuf::int32 ScalarInt::val() const {
  return val_;
}
inline void ScalarInt::set_val(::google::protobuf::int32 value) {
  set_has_val();
  val_ = value;
}

// optional int32 severity = 4 [default = 0];
inline bool ScalarInt::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScalarInt::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScalarInt::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScalarInt::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 ScalarInt::severity() const {
  return severity_;
}
inline void ScalarInt::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
}

// optional int32 status = 5 [default = 0];
inline bool ScalarInt::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScalarInt::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScalarInt::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScalarInt::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 ScalarInt::status() const {
  return status_;
}
inline void ScalarInt::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 repeatcount = 6;
inline bool ScalarInt::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ScalarInt::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ScalarInt::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ScalarInt::clear_repeatcount() {
  repeatcount_ = 0u;
  clear_has_repeatcount();
}
inline ::google::protobuf::uint32 ScalarInt::repeatcount() const {
  return repeatcount_;
}
inline void ScalarInt::set_repeatcount(::google::protobuf::uint32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int ScalarInt::fieldvalues_size() const {
  return fieldvalues_.size();
}
inline void ScalarInt::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline const ::EPICS::FieldValue& ScalarInt::fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline ::EPICS::FieldValue* ScalarInt::mutable_fieldvalues(int index) {
  return fieldvalues_.Mutable(index);
}
inline ::EPICS::FieldValue* ScalarInt::add_fieldvalues() {
  return fieldvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
ScalarInt::fieldvalues() const {
  return fieldvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
ScalarInt::mutable_fieldvalues() {
  return &fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool ScalarInt::has_fieldactualchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ScalarInt::set_has_fieldactualchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ScalarInt::clear_has_fieldactualchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ScalarInt::clear_fieldactualchange() {
  fieldactualchange_ = false;
  clear_has_fieldactualchange();
}
inline bool ScalarInt::fieldactualchange() const {
  return fieldactualchange_;
}
inline void ScalarInt::set_fieldactualchange(bool value) {
  set_has_fieldactualchange();
  fieldactualchange_ = value;
}

// -------------------------------------------------------------------

// ScalarEnum

// required uint32 secondsintoyear = 1;
inline bool ScalarEnum::has_secondsintoyear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScalarEnum::set_has_secondsintoyear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScalarEnum::clear_has_secondsintoyear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScalarEnum::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  clear_has_secondsintoyear();
}
inline ::google::protobuf::uint32 ScalarEnum::secondsintoyear() const {
  return secondsintoyear_;
}
inline void ScalarEnum::set_secondsintoyear(::google::protobuf::uint32 value) {
  set_has_secondsintoyear();
  secondsintoyear_ = value;
}

// required uint32 nano = 2;
inline bool ScalarEnum::has_nano() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScalarEnum::set_has_nano() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScalarEnum::clear_has_nano() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScalarEnum::clear_nano() {
  nano_ = 0u;
  clear_has_nano();
}
inline ::google::protobuf::uint32 ScalarEnum::nano() const {
  return nano_;
}
inline void ScalarEnum::set_nano(::google::protobuf::uint32 value) {
  set_has_nano();
  nano_ = value;
}

// required sint32 val = 3;
inline bool ScalarEnum::has_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScalarEnum::set_has_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScalarEnum::clear_has_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScalarEnum::clear_val() {
  val_ = 0;
  clear_has_val();
}
inline ::google::protobuf::int32 ScalarEnum::val() const {
  return val_;
}
inline void ScalarEnum::set_val(::google::protobuf::int32 value) {
  set_has_val();
  val_ = value;
}

// optional int32 severity = 4 [default = 0];
inline bool ScalarEnum::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScalarEnum::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScalarEnum::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScalarEnum::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 ScalarEnum::severity() const {
  return severity_;
}
inline void ScalarEnum::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
}

// optional int32 status = 5 [default = 0];
inline bool ScalarEnum::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScalarEnum::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScalarEnum::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScalarEnum::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 ScalarEnum::status() const {
  return status_;
}
inline void ScalarEnum::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 repeatcount = 6;
inline bool ScalarEnum::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ScalarEnum::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ScalarEnum::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ScalarEnum::clear_repeatcount() {
  repeatcount_ = 0u;
  clear_has_repeatcount();
}
inline ::google::protobuf::uint32 ScalarEnum::repeatcount() const {
  return repeatcount_;
}
inline void ScalarEnum::set_repeatcount(::google::protobuf::uint32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int ScalarEnum::fieldvalues_size() const {
  return fieldvalues_.size();
}
inline void ScalarEnum::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline const ::EPICS::FieldValue& ScalarEnum::fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline ::EPICS::FieldValue* ScalarEnum::mutable_fieldvalues(int index) {
  return fieldvalues_.Mutable(index);
}
inline ::EPICS::FieldValue* ScalarEnum::add_fieldvalues() {
  return fieldvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
ScalarEnum::fieldvalues() const {
  return fieldvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
ScalarEnum::mutable_fieldvalues() {
  return &fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool ScalarEnum::has_fieldactualchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ScalarEnum::set_has_fieldactualchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ScalarEnum::clear_has_fieldactualchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ScalarEnum::clear_fieldactualchange() {
  fieldactualchange_ = false;
  clear_has_fieldactualchange();
}
inline bool ScalarEnum::fieldactualchange() const {
  return fieldactualchange_;
}
inline void ScalarEnum::set_fieldactualchange(bool value) {
  set_has_fieldactualchange();
  fieldactualchange_ = value;
}

// -------------------------------------------------------------------

// ScalarFloat

// required uint32 secondsintoyear = 1;
inline bool ScalarFloat::has_secondsintoyear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScalarFloat::set_has_secondsintoyear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScalarFloat::clear_has_secondsintoyear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScalarFloat::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  clear_has_secondsintoyear();
}
inline ::google::protobuf::uint32 ScalarFloat::secondsintoyear() const {
  return secondsintoyear_;
}
inline void ScalarFloat::set_secondsintoyear(::google::protobuf::uint32 value) {
  set_has_secondsintoyear();
  secondsintoyear_ = value;
}

// required uint32 nano = 2;
inline bool ScalarFloat::has_nano() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScalarFloat::set_has_nano() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScalarFloat::clear_has_nano() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScalarFloat::clear_nano() {
  nano_ = 0u;
  clear_has_nano();
}
inline ::google::protobuf::uint32 ScalarFloat::nano() const {
  return nano_;
}
inline void ScalarFloat::set_nano(::google::protobuf::uint32 value) {
  set_has_nano();
  nano_ = value;
}

// required float val = 3;
inline bool ScalarFloat::has_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScalarFloat::set_has_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScalarFloat::clear_has_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScalarFloat::clear_val() {
  val_ = 0;
  clear_has_val();
}
inline float ScalarFloat::val() const {
  return val_;
}
inline void ScalarFloat::set_val(float value) {
  set_has_val();
  val_ = value;
}

// optional int32 severity = 4 [default = 0];
inline bool ScalarFloat::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScalarFloat::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScalarFloat::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScalarFloat::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 ScalarFloat::severity() const {
  return severity_;
}
inline void ScalarFloat::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
}

// optional int32 status = 5 [default = 0];
inline bool ScalarFloat::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScalarFloat::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScalarFloat::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScalarFloat::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 ScalarFloat::status() const {
  return status_;
}
inline void ScalarFloat::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 repeatcount = 6;
inline bool ScalarFloat::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ScalarFloat::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ScalarFloat::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ScalarFloat::clear_repeatcount() {
  repeatcount_ = 0u;
  clear_has_repeatcount();
}
inline ::google::protobuf::uint32 ScalarFloat::repeatcount() const {
  return repeatcount_;
}
inline void ScalarFloat::set_repeatcount(::google::protobuf::uint32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int ScalarFloat::fieldvalues_size() const {
  return fieldvalues_.size();
}
inline void ScalarFloat::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline const ::EPICS::FieldValue& ScalarFloat::fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline ::EPICS::FieldValue* ScalarFloat::mutable_fieldvalues(int index) {
  return fieldvalues_.Mutable(index);
}
inline ::EPICS::FieldValue* ScalarFloat::add_fieldvalues() {
  return fieldvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
ScalarFloat::fieldvalues() const {
  return fieldvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
ScalarFloat::mutable_fieldvalues() {
  return &fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool ScalarFloat::has_fieldactualchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ScalarFloat::set_has_fieldactualchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ScalarFloat::clear_has_fieldactualchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ScalarFloat::clear_fieldactualchange() {
  fieldactualchange_ = false;
  clear_has_fieldactualchange();
}
inline bool ScalarFloat::fieldactualchange() const {
  return fieldactualchange_;
}
inline void ScalarFloat::set_fieldactualchange(bool value) {
  set_has_fieldactualchange();
  fieldactualchange_ = value;
}

// -------------------------------------------------------------------

// ScalarDouble

// required uint32 secondsintoyear = 1;
inline bool ScalarDouble::has_secondsintoyear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScalarDouble::set_has_secondsintoyear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScalarDouble::clear_has_secondsintoyear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScalarDouble::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  clear_has_secondsintoyear();
}
inline ::google::protobuf::uint32 ScalarDouble::secondsintoyear() const {
  return secondsintoyear_;
}
inline void ScalarDouble::set_secondsintoyear(::google::protobuf::uint32 value) {
  set_has_secondsintoyear();
  secondsintoyear_ = value;
}

// required uint32 nano = 2;
inline bool ScalarDouble::has_nano() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScalarDouble::set_has_nano() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScalarDouble::clear_has_nano() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScalarDouble::clear_nano() {
  nano_ = 0u;
  clear_has_nano();
}
inline ::google::protobuf::uint32 ScalarDouble::nano() const {
  return nano_;
}
inline void ScalarDouble::set_nano(::google::protobuf::uint32 value) {
  set_has_nano();
  nano_ = value;
}

// required double val = 3;
inline bool ScalarDouble::has_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScalarDouble::set_has_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScalarDouble::clear_has_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScalarDouble::clear_val() {
  val_ = 0;
  clear_has_val();
}
inline double ScalarDouble::val() const {
  return val_;
}
inline void ScalarDouble::set_val(double value) {
  set_has_val();
  val_ = value;
}

// optional int32 severity = 4 [default = 0];
inline bool ScalarDouble::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScalarDouble::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScalarDouble::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScalarDouble::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 ScalarDouble::severity() const {
  return severity_;
}
inline void ScalarDouble::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
}

// optional int32 status = 5 [default = 0];
inline bool ScalarDouble::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScalarDouble::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScalarDouble::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScalarDouble::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 ScalarDouble::status() const {
  return status_;
}
inline void ScalarDouble::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 repeatcount = 6;
inline bool ScalarDouble::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ScalarDouble::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ScalarDouble::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ScalarDouble::clear_repeatcount() {
  repeatcount_ = 0u;
  clear_has_repeatcount();
}
inline ::google::protobuf::uint32 ScalarDouble::repeatcount() const {
  return repeatcount_;
}
inline void ScalarDouble::set_repeatcount(::google::protobuf::uint32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int ScalarDouble::fieldvalues_size() const {
  return fieldvalues_.size();
}
inline void ScalarDouble::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline const ::EPICS::FieldValue& ScalarDouble::fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline ::EPICS::FieldValue* ScalarDouble::mutable_fieldvalues(int index) {
  return fieldvalues_.Mutable(index);
}
inline ::EPICS::FieldValue* ScalarDouble::add_fieldvalues() {
  return fieldvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
ScalarDouble::fieldvalues() const {
  return fieldvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
ScalarDouble::mutable_fieldvalues() {
  return &fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool ScalarDouble::has_fieldactualchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ScalarDouble::set_has_fieldactualchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ScalarDouble::clear_has_fieldactualchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ScalarDouble::clear_fieldactualchange() {
  fieldactualchange_ = false;
  clear_has_fieldactualchange();
}
inline bool ScalarDouble::fieldactualchange() const {
  return fieldactualchange_;
}
inline void ScalarDouble::set_fieldactualchange(bool value) {
  set_has_fieldactualchange();
  fieldactualchange_ = value;
}

// -------------------------------------------------------------------

// VectorString

// required uint32 secondsintoyear = 1;
inline bool VectorString::has_secondsintoyear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorString::set_has_secondsintoyear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorString::clear_has_secondsintoyear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorString::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  clear_has_secondsintoyear();
}
inline ::google::protobuf::uint32 VectorString::secondsintoyear() const {
  return secondsintoyear_;
}
inline void VectorString::set_secondsintoyear(::google::protobuf::uint32 value) {
  set_has_secondsintoyear();
  secondsintoyear_ = value;
}

// required uint32 nano = 2;
inline bool VectorString::has_nano() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorString::set_has_nano() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorString::clear_has_nano() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorString::clear_nano() {
  nano_ = 0u;
  clear_has_nano();
}
inline ::google::protobuf::uint32 VectorString::nano() const {
  return nano_;
}
inline void VectorString::set_nano(::google::protobuf::uint32 value) {
  set_has_nano();
  nano_ = value;
}

// repeated string val = 3;
inline int VectorString::val_size() const {
  return val_.size();
}
inline void VectorString::clear_val() {
  val_.Clear();
}
inline const ::std::string& VectorString::val(int index) const {
  return val_.Get(index);
}
inline ::std::string* VectorString::mutable_val(int index) {
  return val_.Mutable(index);
}
inline void VectorString::set_val(int index, const ::std::string& value) {
  val_.Mutable(index)->assign(value);
}
inline void VectorString::set_val(int index, const char* value) {
  val_.Mutable(index)->assign(value);
}
inline void VectorString::set_val(int index, const char* value, size_t size) {
  val_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VectorString::add_val() {
  return val_.Add();
}
inline void VectorString::add_val(const ::std::string& value) {
  val_.Add()->assign(value);
}
inline void VectorString::add_val(const char* value) {
  val_.Add()->assign(value);
}
inline void VectorString::add_val(const char* value, size_t size) {
  val_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VectorString::val() const {
  return val_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VectorString::mutable_val() {
  return &val_;
}

// optional int32 severity = 4 [default = 0];
inline bool VectorString::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VectorString::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VectorString::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VectorString::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 VectorString::severity() const {
  return severity_;
}
inline void VectorString::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
}

// optional int32 status = 5 [default = 0];
inline bool VectorString::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VectorString::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VectorString::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VectorString::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 VectorString::status() const {
  return status_;
}
inline void VectorString::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 repeatcount = 6;
inline bool VectorString::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VectorString::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VectorString::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VectorString::clear_repeatcount() {
  repeatcount_ = 0u;
  clear_has_repeatcount();
}
inline ::google::protobuf::uint32 VectorString::repeatcount() const {
  return repeatcount_;
}
inline void VectorString::set_repeatcount(::google::protobuf::uint32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int VectorString::fieldvalues_size() const {
  return fieldvalues_.size();
}
inline void VectorString::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline const ::EPICS::FieldValue& VectorString::fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline ::EPICS::FieldValue* VectorString::mutable_fieldvalues(int index) {
  return fieldvalues_.Mutable(index);
}
inline ::EPICS::FieldValue* VectorString::add_fieldvalues() {
  return fieldvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
VectorString::fieldvalues() const {
  return fieldvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
VectorString::mutable_fieldvalues() {
  return &fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool VectorString::has_fieldactualchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VectorString::set_has_fieldactualchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VectorString::clear_has_fieldactualchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VectorString::clear_fieldactualchange() {
  fieldactualchange_ = false;
  clear_has_fieldactualchange();
}
inline bool VectorString::fieldactualchange() const {
  return fieldactualchange_;
}
inline void VectorString::set_fieldactualchange(bool value) {
  set_has_fieldactualchange();
  fieldactualchange_ = value;
}

// -------------------------------------------------------------------

// VectorChar

// required uint32 secondsintoyear = 1;
inline bool VectorChar::has_secondsintoyear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorChar::set_has_secondsintoyear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorChar::clear_has_secondsintoyear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorChar::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  clear_has_secondsintoyear();
}
inline ::google::protobuf::uint32 VectorChar::secondsintoyear() const {
  return secondsintoyear_;
}
inline void VectorChar::set_secondsintoyear(::google::protobuf::uint32 value) {
  set_has_secondsintoyear();
  secondsintoyear_ = value;
}

// required uint32 nano = 2;
inline bool VectorChar::has_nano() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorChar::set_has_nano() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorChar::clear_has_nano() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorChar::clear_nano() {
  nano_ = 0u;
  clear_has_nano();
}
inline ::google::protobuf::uint32 VectorChar::nano() const {
  return nano_;
}
inline void VectorChar::set_nano(::google::protobuf::uint32 value) {
  set_has_nano();
  nano_ = value;
}

// required bytes val = 3;
inline bool VectorChar::has_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VectorChar::set_has_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VectorChar::clear_has_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VectorChar::clear_val() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& VectorChar::val() const {
  return *val_;
}
inline void VectorChar::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void VectorChar::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void VectorChar::set_val(const void* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VectorChar::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  return val_;
}
inline ::std::string* VectorChar::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 severity = 4 [default = 0];
inline bool VectorChar::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VectorChar::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VectorChar::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VectorChar::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 VectorChar::severity() const {
  return severity_;
}
inline void VectorChar::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
}

// optional int32 status = 5 [default = 0];
inline bool VectorChar::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VectorChar::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VectorChar::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VectorChar::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 VectorChar::status() const {
  return status_;
}
inline void VectorChar::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 repeatcount = 6;
inline bool VectorChar::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VectorChar::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VectorChar::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VectorChar::clear_repeatcount() {
  repeatcount_ = 0u;
  clear_has_repeatcount();
}
inline ::google::protobuf::uint32 VectorChar::repeatcount() const {
  return repeatcount_;
}
inline void VectorChar::set_repeatcount(::google::protobuf::uint32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int VectorChar::fieldvalues_size() const {
  return fieldvalues_.size();
}
inline void VectorChar::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline const ::EPICS::FieldValue& VectorChar::fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline ::EPICS::FieldValue* VectorChar::mutable_fieldvalues(int index) {
  return fieldvalues_.Mutable(index);
}
inline ::EPICS::FieldValue* VectorChar::add_fieldvalues() {
  return fieldvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
VectorChar::fieldvalues() const {
  return fieldvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
VectorChar::mutable_fieldvalues() {
  return &fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool VectorChar::has_fieldactualchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VectorChar::set_has_fieldactualchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VectorChar::clear_has_fieldactualchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VectorChar::clear_fieldactualchange() {
  fieldactualchange_ = false;
  clear_has_fieldactualchange();
}
inline bool VectorChar::fieldactualchange() const {
  return fieldactualchange_;
}
inline void VectorChar::set_fieldactualchange(bool value) {
  set_has_fieldactualchange();
  fieldactualchange_ = value;
}

// -------------------------------------------------------------------

// VectorShort

// required uint32 secondsintoyear = 1;
inline bool VectorShort::has_secondsintoyear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorShort::set_has_secondsintoyear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorShort::clear_has_secondsintoyear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorShort::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  clear_has_secondsintoyear();
}
inline ::google::protobuf::uint32 VectorShort::secondsintoyear() const {
  return secondsintoyear_;
}
inline void VectorShort::set_secondsintoyear(::google::protobuf::uint32 value) {
  set_has_secondsintoyear();
  secondsintoyear_ = value;
}

// required uint32 nano = 2;
inline bool VectorShort::has_nano() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorShort::set_has_nano() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorShort::clear_has_nano() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorShort::clear_nano() {
  nano_ = 0u;
  clear_has_nano();
}
inline ::google::protobuf::uint32 VectorShort::nano() const {
  return nano_;
}
inline void VectorShort::set_nano(::google::protobuf::uint32 value) {
  set_has_nano();
  nano_ = value;
}

// repeated sint32 val = 3 [packed = true];
inline int VectorShort::val_size() const {
  return val_.size();
}
inline void VectorShort::clear_val() {
  val_.Clear();
}
inline ::google::protobuf::int32 VectorShort::val(int index) const {
  return val_.Get(index);
}
inline void VectorShort::set_val(int index, ::google::protobuf::int32 value) {
  val_.Set(index, value);
}
inline void VectorShort::add_val(::google::protobuf::int32 value) {
  val_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VectorShort::val() const {
  return val_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VectorShort::mutable_val() {
  return &val_;
}

// optional int32 severity = 4 [default = 0];
inline bool VectorShort::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VectorShort::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VectorShort::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VectorShort::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 VectorShort::severity() const {
  return severity_;
}
inline void VectorShort::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
}

// optional int32 status = 5 [default = 0];
inline bool VectorShort::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VectorShort::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VectorShort::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VectorShort::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 VectorShort::status() const {
  return status_;
}
inline void VectorShort::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 repeatcount = 6;
inline bool VectorShort::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VectorShort::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VectorShort::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VectorShort::clear_repeatcount() {
  repeatcount_ = 0u;
  clear_has_repeatcount();
}
inline ::google::protobuf::uint32 VectorShort::repeatcount() const {
  return repeatcount_;
}
inline void VectorShort::set_repeatcount(::google::protobuf::uint32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int VectorShort::fieldvalues_size() const {
  return fieldvalues_.size();
}
inline void VectorShort::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline const ::EPICS::FieldValue& VectorShort::fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline ::EPICS::FieldValue* VectorShort::mutable_fieldvalues(int index) {
  return fieldvalues_.Mutable(index);
}
inline ::EPICS::FieldValue* VectorShort::add_fieldvalues() {
  return fieldvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
VectorShort::fieldvalues() const {
  return fieldvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
VectorShort::mutable_fieldvalues() {
  return &fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool VectorShort::has_fieldactualchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VectorShort::set_has_fieldactualchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VectorShort::clear_has_fieldactualchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VectorShort::clear_fieldactualchange() {
  fieldactualchange_ = false;
  clear_has_fieldactualchange();
}
inline bool VectorShort::fieldactualchange() const {
  return fieldactualchange_;
}
inline void VectorShort::set_fieldactualchange(bool value) {
  set_has_fieldactualchange();
  fieldactualchange_ = value;
}

// -------------------------------------------------------------------

// VectorInt

// required uint32 secondsintoyear = 1;
inline bool VectorInt::has_secondsintoyear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorInt::set_has_secondsintoyear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorInt::clear_has_secondsintoyear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorInt::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  clear_has_secondsintoyear();
}
inline ::google::protobuf::uint32 VectorInt::secondsintoyear() const {
  return secondsintoyear_;
}
inline void VectorInt::set_secondsintoyear(::google::protobuf::uint32 value) {
  set_has_secondsintoyear();
  secondsintoyear_ = value;
}

// required uint32 nano = 2;
inline bool VectorInt::has_nano() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorInt::set_has_nano() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorInt::clear_has_nano() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorInt::clear_nano() {
  nano_ = 0u;
  clear_has_nano();
}
inline ::google::protobuf::uint32 VectorInt::nano() const {
  return nano_;
}
inline void VectorInt::set_nano(::google::protobuf::uint32 value) {
  set_has_nano();
  nano_ = value;
}

// repeated sfixed32 val = 3 [packed = true];
inline int VectorInt::val_size() const {
  return val_.size();
}
inline void VectorInt::clear_val() {
  val_.Clear();
}
inline ::google::protobuf::int32 VectorInt::val(int index) const {
  return val_.Get(index);
}
inline void VectorInt::set_val(int index, ::google::protobuf::int32 value) {
  val_.Set(index, value);
}
inline void VectorInt::add_val(::google::protobuf::int32 value) {
  val_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VectorInt::val() const {
  return val_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VectorInt::mutable_val() {
  return &val_;
}

// optional int32 severity = 4 [default = 0];
inline bool VectorInt::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VectorInt::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VectorInt::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VectorInt::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 VectorInt::severity() const {
  return severity_;
}
inline void VectorInt::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
}

// optional int32 status = 5 [default = 0];
inline bool VectorInt::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VectorInt::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VectorInt::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VectorInt::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 VectorInt::status() const {
  return status_;
}
inline void VectorInt::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 repeatcount = 6;
inline bool VectorInt::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VectorInt::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VectorInt::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VectorInt::clear_repeatcount() {
  repeatcount_ = 0u;
  clear_has_repeatcount();
}
inline ::google::protobuf::uint32 VectorInt::repeatcount() const {
  return repeatcount_;
}
inline void VectorInt::set_repeatcount(::google::protobuf::uint32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int VectorInt::fieldvalues_size() const {
  return fieldvalues_.size();
}
inline void VectorInt::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline const ::EPICS::FieldValue& VectorInt::fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline ::EPICS::FieldValue* VectorInt::mutable_fieldvalues(int index) {
  return fieldvalues_.Mutable(index);
}
inline ::EPICS::FieldValue* VectorInt::add_fieldvalues() {
  return fieldvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
VectorInt::fieldvalues() const {
  return fieldvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
VectorInt::mutable_fieldvalues() {
  return &fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool VectorInt::has_fieldactualchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VectorInt::set_has_fieldactualchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VectorInt::clear_has_fieldactualchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VectorInt::clear_fieldactualchange() {
  fieldactualchange_ = false;
  clear_has_fieldactualchange();
}
inline bool VectorInt::fieldactualchange() const {
  return fieldactualchange_;
}
inline void VectorInt::set_fieldactualchange(bool value) {
  set_has_fieldactualchange();
  fieldactualchange_ = value;
}

// -------------------------------------------------------------------

// VectorEnum

// required uint32 secondsintoyear = 1;
inline bool VectorEnum::has_secondsintoyear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorEnum::set_has_secondsintoyear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorEnum::clear_has_secondsintoyear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorEnum::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  clear_has_secondsintoyear();
}
inline ::google::protobuf::uint32 VectorEnum::secondsintoyear() const {
  return secondsintoyear_;
}
inline void VectorEnum::set_secondsintoyear(::google::protobuf::uint32 value) {
  set_has_secondsintoyear();
  secondsintoyear_ = value;
}

// required uint32 nano = 2;
inline bool VectorEnum::has_nano() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorEnum::set_has_nano() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorEnum::clear_has_nano() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorEnum::clear_nano() {
  nano_ = 0u;
  clear_has_nano();
}
inline ::google::protobuf::uint32 VectorEnum::nano() const {
  return nano_;
}
inline void VectorEnum::set_nano(::google::protobuf::uint32 value) {
  set_has_nano();
  nano_ = value;
}

// repeated sint32 val = 3 [packed = true];
inline int VectorEnum::val_size() const {
  return val_.size();
}
inline void VectorEnum::clear_val() {
  val_.Clear();
}
inline ::google::protobuf::int32 VectorEnum::val(int index) const {
  return val_.Get(index);
}
inline void VectorEnum::set_val(int index, ::google::protobuf::int32 value) {
  val_.Set(index, value);
}
inline void VectorEnum::add_val(::google::protobuf::int32 value) {
  val_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VectorEnum::val() const {
  return val_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VectorEnum::mutable_val() {
  return &val_;
}

// optional int32 severity = 4 [default = 0];
inline bool VectorEnum::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VectorEnum::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VectorEnum::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VectorEnum::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 VectorEnum::severity() const {
  return severity_;
}
inline void VectorEnum::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
}

// optional int32 status = 5 [default = 0];
inline bool VectorEnum::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VectorEnum::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VectorEnum::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VectorEnum::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 VectorEnum::status() const {
  return status_;
}
inline void VectorEnum::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 repeatcount = 6;
inline bool VectorEnum::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VectorEnum::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VectorEnum::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VectorEnum::clear_repeatcount() {
  repeatcount_ = 0u;
  clear_has_repeatcount();
}
inline ::google::protobuf::uint32 VectorEnum::repeatcount() const {
  return repeatcount_;
}
inline void VectorEnum::set_repeatcount(::google::protobuf::uint32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int VectorEnum::fieldvalues_size() const {
  return fieldvalues_.size();
}
inline void VectorEnum::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline const ::EPICS::FieldValue& VectorEnum::fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline ::EPICS::FieldValue* VectorEnum::mutable_fieldvalues(int index) {
  return fieldvalues_.Mutable(index);
}
inline ::EPICS::FieldValue* VectorEnum::add_fieldvalues() {
  return fieldvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
VectorEnum::fieldvalues() const {
  return fieldvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
VectorEnum::mutable_fieldvalues() {
  return &fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool VectorEnum::has_fieldactualchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VectorEnum::set_has_fieldactualchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VectorEnum::clear_has_fieldactualchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VectorEnum::clear_fieldactualchange() {
  fieldactualchange_ = false;
  clear_has_fieldactualchange();
}
inline bool VectorEnum::fieldactualchange() const {
  return fieldactualchange_;
}
inline void VectorEnum::set_fieldactualchange(bool value) {
  set_has_fieldactualchange();
  fieldactualchange_ = value;
}

// -------------------------------------------------------------------

// VectorFloat

// required uint32 secondsintoyear = 1;
inline bool VectorFloat::has_secondsintoyear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorFloat::set_has_secondsintoyear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorFloat::clear_has_secondsintoyear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorFloat::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  clear_has_secondsintoyear();
}
inline ::google::protobuf::uint32 VectorFloat::secondsintoyear() const {
  return secondsintoyear_;
}
inline void VectorFloat::set_secondsintoyear(::google::protobuf::uint32 value) {
  set_has_secondsintoyear();
  secondsintoyear_ = value;
}

// required uint32 nano = 2;
inline bool VectorFloat::has_nano() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorFloat::set_has_nano() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorFloat::clear_has_nano() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorFloat::clear_nano() {
  nano_ = 0u;
  clear_has_nano();
}
inline ::google::protobuf::uint32 VectorFloat::nano() const {
  return nano_;
}
inline void VectorFloat::set_nano(::google::protobuf::uint32 value) {
  set_has_nano();
  nano_ = value;
}

// repeated float val = 3 [packed = true];
inline int VectorFloat::val_size() const {
  return val_.size();
}
inline void VectorFloat::clear_val() {
  val_.Clear();
}
inline float VectorFloat::val(int index) const {
  return val_.Get(index);
}
inline void VectorFloat::set_val(int index, float value) {
  val_.Set(index, value);
}
inline void VectorFloat::add_val(float value) {
  val_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
VectorFloat::val() const {
  return val_;
}
inline ::google::protobuf::RepeatedField< float >*
VectorFloat::mutable_val() {
  return &val_;
}

// optional int32 severity = 4 [default = 0];
inline bool VectorFloat::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VectorFloat::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VectorFloat::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VectorFloat::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 VectorFloat::severity() const {
  return severity_;
}
inline void VectorFloat::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
}

// optional int32 status = 5 [default = 0];
inline bool VectorFloat::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VectorFloat::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VectorFloat::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VectorFloat::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 VectorFloat::status() const {
  return status_;
}
inline void VectorFloat::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 repeatcount = 6;
inline bool VectorFloat::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VectorFloat::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VectorFloat::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VectorFloat::clear_repeatcount() {
  repeatcount_ = 0u;
  clear_has_repeatcount();
}
inline ::google::protobuf::uint32 VectorFloat::repeatcount() const {
  return repeatcount_;
}
inline void VectorFloat::set_repeatcount(::google::protobuf::uint32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int VectorFloat::fieldvalues_size() const {
  return fieldvalues_.size();
}
inline void VectorFloat::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline const ::EPICS::FieldValue& VectorFloat::fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline ::EPICS::FieldValue* VectorFloat::mutable_fieldvalues(int index) {
  return fieldvalues_.Mutable(index);
}
inline ::EPICS::FieldValue* VectorFloat::add_fieldvalues() {
  return fieldvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
VectorFloat::fieldvalues() const {
  return fieldvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
VectorFloat::mutable_fieldvalues() {
  return &fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool VectorFloat::has_fieldactualchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VectorFloat::set_has_fieldactualchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VectorFloat::clear_has_fieldactualchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VectorFloat::clear_fieldactualchange() {
  fieldactualchange_ = false;
  clear_has_fieldactualchange();
}
inline bool VectorFloat::fieldactualchange() const {
  return fieldactualchange_;
}
inline void VectorFloat::set_fieldactualchange(bool value) {
  set_has_fieldactualchange();
  fieldactualchange_ = value;
}

// -------------------------------------------------------------------

// VectorDouble

// required uint32 secondsintoyear = 1;
inline bool VectorDouble::has_secondsintoyear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VectorDouble::set_has_secondsintoyear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VectorDouble::clear_has_secondsintoyear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VectorDouble::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  clear_has_secondsintoyear();
}
inline ::google::protobuf::uint32 VectorDouble::secondsintoyear() const {
  return secondsintoyear_;
}
inline void VectorDouble::set_secondsintoyear(::google::protobuf::uint32 value) {
  set_has_secondsintoyear();
  secondsintoyear_ = value;
}

// required uint32 nano = 2;
inline bool VectorDouble::has_nano() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VectorDouble::set_has_nano() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VectorDouble::clear_has_nano() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VectorDouble::clear_nano() {
  nano_ = 0u;
  clear_has_nano();
}
inline ::google::protobuf::uint32 VectorDouble::nano() const {
  return nano_;
}
inline void VectorDouble::set_nano(::google::protobuf::uint32 value) {
  set_has_nano();
  nano_ = value;
}

// repeated double val = 3 [packed = true];
inline int VectorDouble::val_size() const {
  return val_.size();
}
inline void VectorDouble::clear_val() {
  val_.Clear();
}
inline double VectorDouble::val(int index) const {
  return val_.Get(index);
}
inline void VectorDouble::set_val(int index, double value) {
  val_.Set(index, value);
}
inline void VectorDouble::add_val(double value) {
  val_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
VectorDouble::val() const {
  return val_;
}
inline ::google::protobuf::RepeatedField< double >*
VectorDouble::mutable_val() {
  return &val_;
}

// optional int32 severity = 4 [default = 0];
inline bool VectorDouble::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VectorDouble::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VectorDouble::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VectorDouble::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 VectorDouble::severity() const {
  return severity_;
}
inline void VectorDouble::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
}

// optional int32 status = 5 [default = 0];
inline bool VectorDouble::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VectorDouble::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VectorDouble::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VectorDouble::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 VectorDouble::status() const {
  return status_;
}
inline void VectorDouble::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 repeatcount = 6;
inline bool VectorDouble::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VectorDouble::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VectorDouble::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VectorDouble::clear_repeatcount() {
  repeatcount_ = 0u;
  clear_has_repeatcount();
}
inline ::google::protobuf::uint32 VectorDouble::repeatcount() const {
  return repeatcount_;
}
inline void VectorDouble::set_repeatcount(::google::protobuf::uint32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int VectorDouble::fieldvalues_size() const {
  return fieldvalues_.size();
}
inline void VectorDouble::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline const ::EPICS::FieldValue& VectorDouble::fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline ::EPICS::FieldValue* VectorDouble::mutable_fieldvalues(int index) {
  return fieldvalues_.Mutable(index);
}
inline ::EPICS::FieldValue* VectorDouble::add_fieldvalues() {
  return fieldvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
VectorDouble::fieldvalues() const {
  return fieldvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
VectorDouble::mutable_fieldvalues() {
  return &fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool VectorDouble::has_fieldactualchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VectorDouble::set_has_fieldactualchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VectorDouble::clear_has_fieldactualchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VectorDouble::clear_fieldactualchange() {
  fieldactualchange_ = false;
  clear_has_fieldactualchange();
}
inline bool VectorDouble::fieldactualchange() const {
  return fieldactualchange_;
}
inline void VectorDouble::set_fieldactualchange(bool value) {
  set_has_fieldactualchange();
  fieldactualchange_ = value;
}

// -------------------------------------------------------------------

// V4GenericBytes

// required uint32 secondsintoyear = 1;
inline bool V4GenericBytes::has_secondsintoyear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void V4GenericBytes::set_has_secondsintoyear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void V4GenericBytes::clear_has_secondsintoyear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void V4GenericBytes::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  clear_has_secondsintoyear();
}
inline ::google::protobuf::uint32 V4GenericBytes::secondsintoyear() const {
  return secondsintoyear_;
}
inline void V4GenericBytes::set_secondsintoyear(::google::protobuf::uint32 value) {
  set_has_secondsintoyear();
  secondsintoyear_ = value;
}

// required uint32 nano = 2;
inline bool V4GenericBytes::has_nano() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void V4GenericBytes::set_has_nano() {
  _has_bits_[0] |= 0x00000002u;
}
inline void V4GenericBytes::clear_has_nano() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void V4GenericBytes::clear_nano() {
  nano_ = 0u;
  clear_has_nano();
}
inline ::google::protobuf::uint32 V4GenericBytes::nano() const {
  return nano_;
}
inline void V4GenericBytes::set_nano(::google::protobuf::uint32 value) {
  set_has_nano();
  nano_ = value;
}

// required bytes val = 3;
inline bool V4GenericBytes::has_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void V4GenericBytes::set_has_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void V4GenericBytes::clear_has_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void V4GenericBytes::clear_val() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& V4GenericBytes::val() const {
  return *val_;
}
inline void V4GenericBytes::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void V4GenericBytes::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void V4GenericBytes::set_val(const void* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* V4GenericBytes::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  return val_;
}
inline ::std::string* V4GenericBytes::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 severity = 4 [default = 0];
inline bool V4GenericBytes::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void V4GenericBytes::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void V4GenericBytes::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void V4GenericBytes::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
inline ::google::protobuf::int32 V4GenericBytes::severity() const {
  return severity_;
}
inline void V4GenericBytes::set_severity(::google::protobuf::int32 value) {
  set_has_severity();
  severity_ = value;
}

// optional int32 status = 5 [default = 0];
inline bool V4GenericBytes::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void V4GenericBytes::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void V4GenericBytes::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void V4GenericBytes::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 V4GenericBytes::status() const {
  return status_;
}
inline void V4GenericBytes::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 repeatcount = 6;
inline bool V4GenericBytes::has_repeatcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void V4GenericBytes::set_has_repeatcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void V4GenericBytes::clear_has_repeatcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void V4GenericBytes::clear_repeatcount() {
  repeatcount_ = 0u;
  clear_has_repeatcount();
}
inline ::google::protobuf::uint32 V4GenericBytes::repeatcount() const {
  return repeatcount_;
}
inline void V4GenericBytes::set_repeatcount(::google::protobuf::uint32 value) {
  set_has_repeatcount();
  repeatcount_ = value;
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int V4GenericBytes::fieldvalues_size() const {
  return fieldvalues_.size();
}
inline void V4GenericBytes::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline const ::EPICS::FieldValue& V4GenericBytes::fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline ::EPICS::FieldValue* V4GenericBytes::mutable_fieldvalues(int index) {
  return fieldvalues_.Mutable(index);
}
inline ::EPICS::FieldValue* V4GenericBytes::add_fieldvalues() {
  return fieldvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
V4GenericBytes::fieldvalues() const {
  return fieldvalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
V4GenericBytes::mutable_fieldvalues() {
  return &fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool V4GenericBytes::has_fieldactualchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void V4GenericBytes::set_has_fieldactualchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void V4GenericBytes::clear_has_fieldactualchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void V4GenericBytes::clear_fieldactualchange() {
  fieldactualchange_ = false;
  clear_has_fieldactualchange();
}
inline bool V4GenericBytes::fieldactualchange() const {
  return fieldactualchange_;
}
inline void V4GenericBytes::set_fieldactualchange(bool value) {
  set_has_fieldactualchange();
  fieldactualchange_ = value;
}

// -------------------------------------------------------------------

// PayloadInfo

// required .EPICS.PayloadType type = 1;
inline bool PayloadInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PayloadInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PayloadInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PayloadInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline EPICS::PayloadType PayloadInfo::type() const {
  return static_cast< EPICS::PayloadType >(type_);
}
inline void PayloadInfo::set_type(EPICS::PayloadType value) {
  GOOGLE_DCHECK(EPICS::PayloadType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string pvname = 2;
inline bool PayloadInfo::has_pvname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PayloadInfo::set_has_pvname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PayloadInfo::clear_has_pvname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PayloadInfo::clear_pvname() {
  if (pvname_ != &::google::protobuf::internal::kEmptyString) {
    pvname_->clear();
  }
  clear_has_pvname();
}
inline const ::std::string& PayloadInfo::pvname() const {
  return *pvname_;
}
inline void PayloadInfo::set_pvname(const ::std::string& value) {
  set_has_pvname();
  if (pvname_ == &::google::protobuf::internal::kEmptyString) {
    pvname_ = new ::std::string;
  }
  pvname_->assign(value);
}
inline void PayloadInfo::set_pvname(const char* value) {
  set_has_pvname();
  if (pvname_ == &::google::protobuf::internal::kEmptyString) {
    pvname_ = new ::std::string;
  }
  pvname_->assign(value);
}
inline void PayloadInfo::set_pvname(const char* value, size_t size) {
  set_has_pvname();
  if (pvname_ == &::google::protobuf::internal::kEmptyString) {
    pvname_ = new ::std::string;
  }
  pvname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayloadInfo::mutable_pvname() {
  set_has_pvname();
  if (pvname_ == &::google::protobuf::internal::kEmptyString) {
    pvname_ = new ::std::string;
  }
  return pvname_;
}
inline ::std::string* PayloadInfo::release_pvname() {
  clear_has_pvname();
  if (pvname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pvname_;
    pvname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 year = 3;
inline bool PayloadInfo::has_year() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PayloadInfo::set_has_year() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PayloadInfo::clear_has_year() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PayloadInfo::clear_year() {
  year_ = 0;
  clear_has_year();
}
inline ::google::protobuf::int32 PayloadInfo::year() const {
  return year_;
}
inline void PayloadInfo::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
}

// optional int32 elementCount = 4;
inline bool PayloadInfo::has_elementcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PayloadInfo::set_has_elementcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PayloadInfo::clear_has_elementcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PayloadInfo::clear_elementcount() {
  elementcount_ = 0;
  clear_has_elementcount();
}
inline ::google::protobuf::int32 PayloadInfo::elementcount() const {
  return elementcount_;
}
inline void PayloadInfo::set_elementcount(::google::protobuf::int32 value) {
  set_has_elementcount();
  elementcount_ = value;
}

// optional double unused00 = 5;
inline bool PayloadInfo::has_unused00() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PayloadInfo::set_has_unused00() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PayloadInfo::clear_has_unused00() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PayloadInfo::clear_unused00() {
  unused00_ = 0;
  clear_has_unused00();
}
inline double PayloadInfo::unused00() const {
  return unused00_;
}
inline void PayloadInfo::set_unused00(double value) {
  set_has_unused00();
  unused00_ = value;
}

// optional double unused01 = 6;
inline bool PayloadInfo::has_unused01() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PayloadInfo::set_has_unused01() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PayloadInfo::clear_has_unused01() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PayloadInfo::clear_unused01() {
  unused01_ = 0;
  clear_has_unused01();
}
inline double PayloadInfo::unused01() const {
  return unused01_;
}
inline void PayloadInfo::set_unused01(double value) {
  set_has_unused01();
  unused01_ = value;
}

// optional double unused02 = 7;
inline bool PayloadInfo::has_unused02() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PayloadInfo::set_has_unused02() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PayloadInfo::clear_has_unused02() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PayloadInfo::clear_unused02() {
  unused02_ = 0;
  clear_has_unused02();
}
inline double PayloadInfo::unused02() const {
  return unused02_;
}
inline void PayloadInfo::set_unused02(double value) {
  set_has_unused02();
  unused02_ = value;
}

// optional double unused03 = 8;
inline bool PayloadInfo::has_unused03() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PayloadInfo::set_has_unused03() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PayloadInfo::clear_has_unused03() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PayloadInfo::clear_unused03() {
  unused03_ = 0;
  clear_has_unused03();
}
inline double PayloadInfo::unused03() const {
  return unused03_;
}
inline void PayloadInfo::set_unused03(double value) {
  set_has_unused03();
  unused03_ = value;
}

// optional double unused04 = 9;
inline bool PayloadInfo::has_unused04() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PayloadInfo::set_has_unused04() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PayloadInfo::clear_has_unused04() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PayloadInfo::clear_unused04() {
  unused04_ = 0;
  clear_has_unused04();
}
inline double PayloadInfo::unused04() const {
  return unused04_;
}
inline void PayloadInfo::set_unused04(double value) {
  set_has_unused04();
  unused04_ = value;
}

// optional double unused05 = 10;
inline bool PayloadInfo::has_unused05() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PayloadInfo::set_has_unused05() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PayloadInfo::clear_has_unused05() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PayloadInfo::clear_unused05() {
  unused05_ = 0;
  clear_has_unused05();
}
inline double PayloadInfo::unused05() const {
  return unused05_;
}
inline void PayloadInfo::set_unused05(double value) {
  set_has_unused05();
  unused05_ = value;
}

// optional double unused06 = 11;
inline bool PayloadInfo::has_unused06() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PayloadInfo::set_has_unused06() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PayloadInfo::clear_has_unused06() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PayloadInfo::clear_unused06() {
  unused06_ = 0;
  clear_has_unused06();
}
inline double PayloadInfo::unused06() const {
  return unused06_;
}
inline void PayloadInfo::set_unused06(double value) {
  set_has_unused06();
  unused06_ = value;
}

// optional double unused07 = 12;
inline bool PayloadInfo::has_unused07() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PayloadInfo::set_has_unused07() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PayloadInfo::clear_has_unused07() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PayloadInfo::clear_unused07() {
  unused07_ = 0;
  clear_has_unused07();
}
inline double PayloadInfo::unused07() const {
  return unused07_;
}
inline void PayloadInfo::set_unused07(double value) {
  set_has_unused07();
  unused07_ = value;
}

// optional double unused08 = 13;
inline bool PayloadInfo::has_unused08() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PayloadInfo::set_has_unused08() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PayloadInfo::clear_has_unused08() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PayloadInfo::clear_unused08() {
  unused08_ = 0;
  clear_has_unused08();
}
inline double PayloadInfo::unused08() const {
  return unused08_;
}
inline void PayloadInfo::set_unused08(double value) {
  set_has_unused08();
  unused08_ = value;
}

// optional string unused09 = 14;
inline bool PayloadInfo::has_unused09() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PayloadInfo::set_has_unused09() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PayloadInfo::clear_has_unused09() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PayloadInfo::clear_unused09() {
  if (unused09_ != &::google::protobuf::internal::kEmptyString) {
    unused09_->clear();
  }
  clear_has_unused09();
}
inline const ::std::string& PayloadInfo::unused09() const {
  return *unused09_;
}
inline void PayloadInfo::set_unused09(const ::std::string& value) {
  set_has_unused09();
  if (unused09_ == &::google::protobuf::internal::kEmptyString) {
    unused09_ = new ::std::string;
  }
  unused09_->assign(value);
}
inline void PayloadInfo::set_unused09(const char* value) {
  set_has_unused09();
  if (unused09_ == &::google::protobuf::internal::kEmptyString) {
    unused09_ = new ::std::string;
  }
  unused09_->assign(value);
}
inline void PayloadInfo::set_unused09(const char* value, size_t size) {
  set_has_unused09();
  if (unused09_ == &::google::protobuf::internal::kEmptyString) {
    unused09_ = new ::std::string;
  }
  unused09_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayloadInfo::mutable_unused09() {
  set_has_unused09();
  if (unused09_ == &::google::protobuf::internal::kEmptyString) {
    unused09_ = new ::std::string;
  }
  return unused09_;
}
inline ::std::string* PayloadInfo::release_unused09() {
  clear_has_unused09();
  if (unused09_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unused09_;
    unused09_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .EPICS.FieldValue headers = 15;
inline int PayloadInfo::headers_size() const {
  return headers_.size();
}
inline void PayloadInfo::clear_headers() {
  headers_.Clear();
}
inline const ::EPICS::FieldValue& PayloadInfo::headers(int index) const {
  return headers_.Get(index);
}
inline ::EPICS::FieldValue* PayloadInfo::mutable_headers(int index) {
  return headers_.Mutable(index);
}
inline ::EPICS::FieldValue* PayloadInfo::add_headers() {
  return headers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >&
PayloadInfo::headers() const {
  return headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::EPICS::FieldValue >*
PayloadInfo::mutable_headers() {
  return &headers_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EPICS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< EPICS::PayloadType>() {
  return EPICS::PayloadType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EPICSEvent_2eproto__INCLUDED
