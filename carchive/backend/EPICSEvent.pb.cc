// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EPICSEvent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EPICS {

namespace {

const ::google::protobuf::Descriptor* FieldValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScalarString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScalarString_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScalarByte_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScalarByte_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScalarShort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScalarShort_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScalarInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScalarInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScalarEnum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScalarEnum_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScalarFloat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScalarFloat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScalarDouble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScalarDouble_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorString_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorChar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorChar_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorShort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorShort_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorEnum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorEnum_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorFloat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorFloat_reflection_ = NULL;
const ::google::protobuf::Descriptor* VectorDouble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorDouble_reflection_ = NULL;
const ::google::protobuf::Descriptor* V4GenericBytes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  V4GenericBytes_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayloadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayloadInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PayloadType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_EPICSEvent_2eproto() {
  protobuf_AddDesc_EPICSEvent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EPICSEvent.proto");
  GOOGLE_CHECK(file != NULL);
  FieldValue_descriptor_ = file->message_type(0);
  static const int FieldValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldValue, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldValue, val_),
  };
  FieldValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FieldValue_descriptor_,
      FieldValue::default_instance_,
      FieldValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FieldValue));
  ScalarString_descriptor_ = file->message_type(1);
  static const int ScalarString_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarString, secondsintoyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarString, nano_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarString, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarString, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarString, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarString, repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarString, fieldvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarString, fieldactualchange_),
  };
  ScalarString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScalarString_descriptor_,
      ScalarString::default_instance_,
      ScalarString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScalarString));
  ScalarByte_descriptor_ = file->message_type(2);
  static const int ScalarByte_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarByte, secondsintoyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarByte, nano_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarByte, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarByte, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarByte, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarByte, repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarByte, fieldvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarByte, fieldactualchange_),
  };
  ScalarByte_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScalarByte_descriptor_,
      ScalarByte::default_instance_,
      ScalarByte_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarByte, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarByte, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScalarByte));
  ScalarShort_descriptor_ = file->message_type(3);
  static const int ScalarShort_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarShort, secondsintoyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarShort, nano_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarShort, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarShort, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarShort, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarShort, repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarShort, fieldvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarShort, fieldactualchange_),
  };
  ScalarShort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScalarShort_descriptor_,
      ScalarShort::default_instance_,
      ScalarShort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarShort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarShort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScalarShort));
  ScalarInt_descriptor_ = file->message_type(4);
  static const int ScalarInt_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarInt, secondsintoyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarInt, nano_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarInt, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarInt, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarInt, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarInt, repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarInt, fieldvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarInt, fieldactualchange_),
  };
  ScalarInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScalarInt_descriptor_,
      ScalarInt::default_instance_,
      ScalarInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScalarInt));
  ScalarEnum_descriptor_ = file->message_type(5);
  static const int ScalarEnum_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarEnum, secondsintoyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarEnum, nano_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarEnum, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarEnum, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarEnum, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarEnum, repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarEnum, fieldvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarEnum, fieldactualchange_),
  };
  ScalarEnum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScalarEnum_descriptor_,
      ScalarEnum::default_instance_,
      ScalarEnum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarEnum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarEnum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScalarEnum));
  ScalarFloat_descriptor_ = file->message_type(6);
  static const int ScalarFloat_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarFloat, secondsintoyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarFloat, nano_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarFloat, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarFloat, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarFloat, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarFloat, repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarFloat, fieldvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarFloat, fieldactualchange_),
  };
  ScalarFloat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScalarFloat_descriptor_,
      ScalarFloat::default_instance_,
      ScalarFloat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarFloat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarFloat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScalarFloat));
  ScalarDouble_descriptor_ = file->message_type(7);
  static const int ScalarDouble_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarDouble, secondsintoyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarDouble, nano_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarDouble, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarDouble, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarDouble, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarDouble, repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarDouble, fieldvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarDouble, fieldactualchange_),
  };
  ScalarDouble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScalarDouble_descriptor_,
      ScalarDouble::default_instance_,
      ScalarDouble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarDouble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScalarDouble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScalarDouble));
  VectorString_descriptor_ = file->message_type(8);
  static const int VectorString_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorString, secondsintoyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorString, nano_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorString, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorString, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorString, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorString, repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorString, fieldvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorString, fieldactualchange_),
  };
  VectorString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorString_descriptor_,
      VectorString::default_instance_,
      VectorString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorString));
  VectorChar_descriptor_ = file->message_type(9);
  static const int VectorChar_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorChar, secondsintoyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorChar, nano_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorChar, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorChar, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorChar, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorChar, repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorChar, fieldvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorChar, fieldactualchange_),
  };
  VectorChar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorChar_descriptor_,
      VectorChar::default_instance_,
      VectorChar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorChar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorChar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorChar));
  VectorShort_descriptor_ = file->message_type(10);
  static const int VectorShort_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorShort, secondsintoyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorShort, nano_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorShort, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorShort, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorShort, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorShort, repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorShort, fieldvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorShort, fieldactualchange_),
  };
  VectorShort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorShort_descriptor_,
      VectorShort::default_instance_,
      VectorShort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorShort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorShort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorShort));
  VectorInt_descriptor_ = file->message_type(11);
  static const int VectorInt_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorInt, secondsintoyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorInt, nano_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorInt, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorInt, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorInt, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorInt, repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorInt, fieldvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorInt, fieldactualchange_),
  };
  VectorInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorInt_descriptor_,
      VectorInt::default_instance_,
      VectorInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorInt));
  VectorEnum_descriptor_ = file->message_type(12);
  static const int VectorEnum_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorEnum, secondsintoyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorEnum, nano_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorEnum, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorEnum, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorEnum, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorEnum, repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorEnum, fieldvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorEnum, fieldactualchange_),
  };
  VectorEnum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorEnum_descriptor_,
      VectorEnum::default_instance_,
      VectorEnum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorEnum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorEnum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorEnum));
  VectorFloat_descriptor_ = file->message_type(13);
  static const int VectorFloat_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorFloat, secondsintoyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorFloat, nano_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorFloat, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorFloat, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorFloat, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorFloat, repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorFloat, fieldvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorFloat, fieldactualchange_),
  };
  VectorFloat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorFloat_descriptor_,
      VectorFloat::default_instance_,
      VectorFloat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorFloat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorFloat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorFloat));
  VectorDouble_descriptor_ = file->message_type(14);
  static const int VectorDouble_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorDouble, secondsintoyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorDouble, nano_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorDouble, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorDouble, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorDouble, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorDouble, repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorDouble, fieldvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorDouble, fieldactualchange_),
  };
  VectorDouble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorDouble_descriptor_,
      VectorDouble::default_instance_,
      VectorDouble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorDouble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorDouble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorDouble));
  V4GenericBytes_descriptor_ = file->message_type(15);
  static const int V4GenericBytes_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V4GenericBytes, secondsintoyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V4GenericBytes, nano_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V4GenericBytes, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V4GenericBytes, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V4GenericBytes, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V4GenericBytes, repeatcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V4GenericBytes, fieldvalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V4GenericBytes, fieldactualchange_),
  };
  V4GenericBytes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      V4GenericBytes_descriptor_,
      V4GenericBytes::default_instance_,
      V4GenericBytes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V4GenericBytes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(V4GenericBytes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(V4GenericBytes));
  PayloadInfo_descriptor_ = file->message_type(16);
  static const int PayloadInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, pvname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, elementcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, unused00_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, unused01_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, unused02_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, unused03_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, unused04_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, unused05_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, unused06_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, unused07_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, unused08_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, unused09_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, headers_),
  };
  PayloadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayloadInfo_descriptor_,
      PayloadInfo::default_instance_,
      PayloadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayloadInfo));
  PayloadType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EPICSEvent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldValue_descriptor_, &FieldValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScalarString_descriptor_, &ScalarString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScalarByte_descriptor_, &ScalarByte::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScalarShort_descriptor_, &ScalarShort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScalarInt_descriptor_, &ScalarInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScalarEnum_descriptor_, &ScalarEnum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScalarFloat_descriptor_, &ScalarFloat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScalarDouble_descriptor_, &ScalarDouble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorString_descriptor_, &VectorString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorChar_descriptor_, &VectorChar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorShort_descriptor_, &VectorShort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorInt_descriptor_, &VectorInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorEnum_descriptor_, &VectorEnum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorFloat_descriptor_, &VectorFloat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorDouble_descriptor_, &VectorDouble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    V4GenericBytes_descriptor_, &V4GenericBytes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayloadInfo_descriptor_, &PayloadInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EPICSEvent_2eproto() {
  delete FieldValue::default_instance_;
  delete FieldValue_reflection_;
  delete ScalarString::default_instance_;
  delete ScalarString_reflection_;
  delete ScalarByte::default_instance_;
  delete ScalarByte_reflection_;
  delete ScalarShort::default_instance_;
  delete ScalarShort_reflection_;
  delete ScalarInt::default_instance_;
  delete ScalarInt_reflection_;
  delete ScalarEnum::default_instance_;
  delete ScalarEnum_reflection_;
  delete ScalarFloat::default_instance_;
  delete ScalarFloat_reflection_;
  delete ScalarDouble::default_instance_;
  delete ScalarDouble_reflection_;
  delete VectorString::default_instance_;
  delete VectorString_reflection_;
  delete VectorChar::default_instance_;
  delete VectorChar_reflection_;
  delete VectorShort::default_instance_;
  delete VectorShort_reflection_;
  delete VectorInt::default_instance_;
  delete VectorInt_reflection_;
  delete VectorEnum::default_instance_;
  delete VectorEnum_reflection_;
  delete VectorFloat::default_instance_;
  delete VectorFloat_reflection_;
  delete VectorDouble::default_instance_;
  delete VectorDouble_reflection_;
  delete V4GenericBytes::default_instance_;
  delete V4GenericBytes_reflection_;
  delete PayloadInfo::default_instance_;
  delete PayloadInfo_reflection_;
}

void protobuf_AddDesc_EPICSEvent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020EPICSEvent.proto\022\005EPICS\"\'\n\nFieldValue\022"
    "\014\n\004name\030\001 \002(\t\022\013\n\003val\030\002 \002(\t\"\302\001\n\014ScalarStr"
    "ing\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002"
    "(\r\022\013\n\003val\030\003 \002(\t\022\023\n\010severity\030\004 \001(\005:\0010\022\021\n\006"
    "status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022&\n\013"
    "fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue\022\031\n\021"
    "fieldactualchange\030\010 \001(\010\"\300\001\n\nScalarByte\022\027"
    "\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002(\r\022\013\n"
    "\003val\030\003 \002(\014\022\023\n\010severity\030\004 \001(\005:\0010\022\021\n\006statu"
    "s\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022&\n\013field"
    "values\030\007 \003(\0132\021.EPICS.FieldValue\022\031\n\021field"
    "actualchange\030\010 \001(\010\"\301\001\n\013ScalarShort\022\027\n\017se"
    "condsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002(\r\022\013\n\003val"
    "\030\003 \002(\021\022\023\n\010severity\030\004 \001(\005:\0010\022\021\n\006status\030\005 "
    "\001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022&\n\013fieldvalu"
    "es\030\007 \003(\0132\021.EPICS.FieldValue\022\031\n\021fieldactu"
    "alchange\030\010 \001(\010\"\277\001\n\tScalarInt\022\027\n\017secondsi"
    "ntoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002(\r\022\013\n\003val\030\003 \002(\017"
    "\022\023\n\010severity\030\004 \001(\005:\0010\022\021\n\006status\030\005 \001(\005:\0010"
    "\022\023\n\013repeatcount\030\006 \001(\r\022&\n\013fieldvalues\030\007 \003"
    "(\0132\021.EPICS.FieldValue\022\031\n\021fieldactualchan"
    "ge\030\010 \001(\010\"\300\001\n\nScalarEnum\022\027\n\017secondsintoye"
    "ar\030\001 \002(\r\022\014\n\004nano\030\002 \002(\r\022\013\n\003val\030\003 \002(\021\022\023\n\010s"
    "everity\030\004 \001(\005:\0010\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013r"
    "epeatcount\030\006 \001(\r\022&\n\013fieldvalues\030\007 \003(\0132\021."
    "EPICS.FieldValue\022\031\n\021fieldactualchange\030\010 "
    "\001(\010\"\301\001\n\013ScalarFloat\022\027\n\017secondsintoyear\030\001"
    " \002(\r\022\014\n\004nano\030\002 \002(\r\022\013\n\003val\030\003 \002(\002\022\023\n\010sever"
    "ity\030\004 \001(\005:\0010\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repea"
    "tcount\030\006 \001(\r\022&\n\013fieldvalues\030\007 \003(\0132\021.EPIC"
    "S.FieldValue\022\031\n\021fieldactualchange\030\010 \001(\010\""
    "\302\001\n\014ScalarDouble\022\027\n\017secondsintoyear\030\001 \002("
    "\r\022\014\n\004nano\030\002 \002(\r\022\013\n\003val\030\003 \002(\001\022\023\n\010severity"
    "\030\004 \001(\005:\0010\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatco"
    "unt\030\006 \001(\r\022&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.F"
    "ieldValue\022\031\n\021fieldactualchange\030\010 \001(\010\"\302\001\n"
    "\014VectorString\022\027\n\017secondsintoyear\030\001 \002(\r\022\014"
    "\n\004nano\030\002 \002(\r\022\013\n\003val\030\003 \003(\t\022\023\n\010severity\030\004 "
    "\001(\005:\0010\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount"
    "\030\006 \001(\r\022&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.Fiel"
    "dValue\022\031\n\021fieldactualchange\030\010 \001(\010\"\300\001\n\nVe"
    "ctorChar\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nan"
    "o\030\002 \002(\r\022\013\n\003val\030\003 \002(\014\022\023\n\010severity\030\004 \001(\005:\001"
    "0\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001("
    "\r\022&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValu"
    "e\022\031\n\021fieldactualchange\030\010 \001(\010\"\305\001\n\013VectorS"
    "hort\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 "
    "\002(\r\022\017\n\003val\030\003 \003(\021B\002\020\001\022\023\n\010severity\030\004 \001(\005:\001"
    "0\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001("
    "\r\022&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValu"
    "e\022\031\n\021fieldactualchange\030\010 \001(\010\"\303\001\n\tVectorI"
    "nt\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002("
    "\r\022\017\n\003val\030\003 \003(\017B\002\020\001\022\023\n\010severity\030\004 \001(\005:\0010\022"
    "\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022"
    "&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue\022"
    "\031\n\021fieldactualchange\030\010 \001(\010\"\304\001\n\nVectorEnu"
    "m\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002(\r"
    "\022\017\n\003val\030\003 \003(\021B\002\020\001\022\023\n\010severity\030\004 \001(\005:\0010\022\021"
    "\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022&"
    "\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue\022\031"
    "\n\021fieldactualchange\030\010 \001(\010\"\305\001\n\013VectorFloa"
    "t\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002(\r"
    "\022\017\n\003val\030\003 \003(\002B\002\020\001\022\023\n\010severity\030\004 \001(\005:\0010\022\021"
    "\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022&"
    "\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue\022\031"
    "\n\021fieldactualchange\030\010 \001(\010\"\306\001\n\014VectorDoub"
    "le\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002("
    "\r\022\017\n\003val\030\003 \003(\001B\002\020\001\022\023\n\010severity\030\004 \001(\005:\0010\022"
    "\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022"
    "&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue\022"
    "\031\n\021fieldactualchange\030\010 \001(\010\"\304\001\n\016V4Generic"
    "Bytes\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002"
    " \002(\r\022\013\n\003val\030\003 \002(\014\022\023\n\010severity\030\004 \001(\005:\0010\022\021"
    "\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022&"
    "\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue\022\031"
    "\n\021fieldactualchange\030\010 \001(\010\"\273\002\n\013PayloadInf"
    "o\022 \n\004type\030\001 \002(\0162\022.EPICS.PayloadType\022\016\n\006p"
    "vname\030\002 \002(\t\022\014\n\004year\030\003 \002(\005\022\024\n\014elementCoun"
    "t\030\004 \001(\005\022\020\n\010unused00\030\005 \001(\001\022\020\n\010unused01\030\006 "
    "\001(\001\022\020\n\010unused02\030\007 \001(\001\022\020\n\010unused03\030\010 \001(\001\022"
    "\020\n\010unused04\030\t \001(\001\022\020\n\010unused05\030\n \001(\001\022\020\n\010u"
    "nused06\030\013 \001(\001\022\020\n\010unused07\030\014 \001(\001\022\020\n\010unuse"
    "d08\030\r \001(\001\022\020\n\010unused09\030\016 \001(\t\022\"\n\007headers\030\017"
    " \003(\0132\021.EPICS.FieldValue*\251\002\n\013PayloadType\022"
    "\021\n\rSCALAR_STRING\020\000\022\020\n\014SCALAR_SHORT\020\001\022\020\n\014"
    "SCALAR_FLOAT\020\002\022\017\n\013SCALAR_ENUM\020\003\022\017\n\013SCALA"
    "R_BYTE\020\004\022\016\n\nSCALAR_INT\020\005\022\021\n\rSCALAR_DOUBL"
    "E\020\006\022\023\n\017WAVEFORM_STRING\020\007\022\022\n\016WAVEFORM_SHO"
    "RT\020\010\022\022\n\016WAVEFORM_FLOAT\020\t\022\021\n\rWAVEFORM_ENU"
    "M\020\n\022\021\n\rWAVEFORM_BYTE\020\013\022\020\n\014WAVEFORM_INT\020\014"
    "\022\023\n\017WAVEFORM_DOUBLE\020\r\022\024\n\020V4_GENERIC_BYTE"
    "S\020\016B4\n&edu.stanford.slac.archiverapplian"
    "ce.PBB\nEPICSEvent", 3697);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EPICSEvent.proto", &protobuf_RegisterTypes);
  FieldValue::default_instance_ = new FieldValue();
  ScalarString::default_instance_ = new ScalarString();
  ScalarByte::default_instance_ = new ScalarByte();
  ScalarShort::default_instance_ = new ScalarShort();
  ScalarInt::default_instance_ = new ScalarInt();
  ScalarEnum::default_instance_ = new ScalarEnum();
  ScalarFloat::default_instance_ = new ScalarFloat();
  ScalarDouble::default_instance_ = new ScalarDouble();
  VectorString::default_instance_ = new VectorString();
  VectorChar::default_instance_ = new VectorChar();
  VectorShort::default_instance_ = new VectorShort();
  VectorInt::default_instance_ = new VectorInt();
  VectorEnum::default_instance_ = new VectorEnum();
  VectorFloat::default_instance_ = new VectorFloat();
  VectorDouble::default_instance_ = new VectorDouble();
  V4GenericBytes::default_instance_ = new V4GenericBytes();
  PayloadInfo::default_instance_ = new PayloadInfo();
  FieldValue::default_instance_->InitAsDefaultInstance();
  ScalarString::default_instance_->InitAsDefaultInstance();
  ScalarByte::default_instance_->InitAsDefaultInstance();
  ScalarShort::default_instance_->InitAsDefaultInstance();
  ScalarInt::default_instance_->InitAsDefaultInstance();
  ScalarEnum::default_instance_->InitAsDefaultInstance();
  ScalarFloat::default_instance_->InitAsDefaultInstance();
  ScalarDouble::default_instance_->InitAsDefaultInstance();
  VectorString::default_instance_->InitAsDefaultInstance();
  VectorChar::default_instance_->InitAsDefaultInstance();
  VectorShort::default_instance_->InitAsDefaultInstance();
  VectorInt::default_instance_->InitAsDefaultInstance();
  VectorEnum::default_instance_->InitAsDefaultInstance();
  VectorFloat::default_instance_->InitAsDefaultInstance();
  VectorDouble::default_instance_->InitAsDefaultInstance();
  V4GenericBytes::default_instance_->InitAsDefaultInstance();
  PayloadInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EPICSEvent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EPICSEvent_2eproto {
  StaticDescriptorInitializer_EPICSEvent_2eproto() {
    protobuf_AddDesc_EPICSEvent_2eproto();
  }
} static_descriptor_initializer_EPICSEvent_2eproto_;

const ::google::protobuf::EnumDescriptor* PayloadType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayloadType_descriptor_;
}
bool PayloadType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int FieldValue::kNameFieldNumber;
const int FieldValue::kValFieldNumber;
#endif  // !_MSC_VER

FieldValue::FieldValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FieldValue::InitAsDefaultInstance() {
}

FieldValue::FieldValue(const FieldValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FieldValue::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldValue::~FieldValue() {
  SharedDtor();
}

void FieldValue::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (this != default_instance_) {
  }
}

void FieldValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldValue_descriptor_;
}

const FieldValue& FieldValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

FieldValue* FieldValue::default_instance_ = NULL;

FieldValue* FieldValue::New() const {
  return new FieldValue;
}

void FieldValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_val()) {
      if (val_ != &::google::protobuf::internal::kEmptyString) {
        val_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_val;
        break;
      }
      
      // required string val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->val().data(), this->val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FieldValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->val(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FieldValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FieldValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldValue::MergeFrom(const FieldValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldValue::CopyFrom(const FieldValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FieldValue::Swap(FieldValue* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FieldValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldValue_descriptor_;
  metadata.reflection = FieldValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScalarString::kSecondsintoyearFieldNumber;
const int ScalarString::kNanoFieldNumber;
const int ScalarString::kValFieldNumber;
const int ScalarString::kSeverityFieldNumber;
const int ScalarString::kStatusFieldNumber;
const int ScalarString::kRepeatcountFieldNumber;
const int ScalarString::kFieldvaluesFieldNumber;
const int ScalarString::kFieldactualchangeFieldNumber;
#endif  // !_MSC_VER

ScalarString::ScalarString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScalarString::InitAsDefaultInstance() {
}

ScalarString::ScalarString(const ScalarString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScalarString::SharedCtor() {
  _cached_size_ = 0;
  secondsintoyear_ = 0u;
  nano_ = 0u;
  val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  severity_ = 0;
  status_ = 0;
  repeatcount_ = 0u;
  fieldactualchange_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScalarString::~ScalarString() {
  SharedDtor();
}

void ScalarString::SharedDtor() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (this != default_instance_) {
  }
}

void ScalarString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScalarString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScalarString_descriptor_;
}

const ScalarString& ScalarString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

ScalarString* ScalarString::default_instance_ = NULL;

ScalarString* ScalarString::New() const {
  return new ScalarString;
}

void ScalarString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secondsintoyear_ = 0u;
    nano_ = 0u;
    if (has_val()) {
      if (val_ != &::google::protobuf::internal::kEmptyString) {
        val_->clear();
      }
    }
    severity_ = 0;
    status_ = 0;
    repeatcount_ = 0u;
    fieldactualchange_ = false;
  }
  fieldvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScalarString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
          set_has_secondsintoyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nano;
        break;
      }
      
      // required uint32 nano = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nano:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
          set_has_nano();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_val;
        break;
      }
      
      // required string val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->val().data(), this->val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_severity;
        break;
      }
      
      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // optional int32 status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_repeatcount;
        break;
      }
      
      // optional uint32 repeatcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        break;
      }
      
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        if (input->ExpectTag(64)) goto parse_fieldactualchange;
        break;
      }
      
      // optional bool fieldactualchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldactualchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
          set_has_fieldactualchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScalarString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }
  
  // required string val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->val(), output);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fieldvalues(i), output);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScalarString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }
  
  // required string val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->val(), target);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fieldvalues(i), target);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScalarString::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secondsintoyear = 1;
    if (has_secondsintoyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondsintoyear());
    }
    
    // required uint32 nano = 2;
    if (has_nano()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nano());
    }
    
    // required string val = 3;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val());
    }
    
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }
    
    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }
    
    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1 * this->fieldvalues_size();
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScalarString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScalarString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScalarString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScalarString::MergeFrom(const ScalarString& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secondsintoyear()) {
      set_secondsintoyear(from.secondsintoyear());
    }
    if (from.has_nano()) {
      set_nano(from.nano());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
    if (from.has_fieldactualchange()) {
      set_fieldactualchange(from.fieldactualchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScalarString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarString::CopyFrom(const ScalarString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < fieldvalues_size(); i++) {
    if (!this->fieldvalues(i).IsInitialized()) return false;
  }
  return true;
}

void ScalarString::Swap(ScalarString* other) {
  if (other != this) {
    std::swap(secondsintoyear_, other->secondsintoyear_);
    std::swap(nano_, other->nano_);
    std::swap(val_, other->val_);
    std::swap(severity_, other->severity_);
    std::swap(status_, other->status_);
    std::swap(repeatcount_, other->repeatcount_);
    fieldvalues_.Swap(&other->fieldvalues_);
    std::swap(fieldactualchange_, other->fieldactualchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScalarString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScalarString_descriptor_;
  metadata.reflection = ScalarString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScalarByte::kSecondsintoyearFieldNumber;
const int ScalarByte::kNanoFieldNumber;
const int ScalarByte::kValFieldNumber;
const int ScalarByte::kSeverityFieldNumber;
const int ScalarByte::kStatusFieldNumber;
const int ScalarByte::kRepeatcountFieldNumber;
const int ScalarByte::kFieldvaluesFieldNumber;
const int ScalarByte::kFieldactualchangeFieldNumber;
#endif  // !_MSC_VER

ScalarByte::ScalarByte()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScalarByte::InitAsDefaultInstance() {
}

ScalarByte::ScalarByte(const ScalarByte& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScalarByte::SharedCtor() {
  _cached_size_ = 0;
  secondsintoyear_ = 0u;
  nano_ = 0u;
  val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  severity_ = 0;
  status_ = 0;
  repeatcount_ = 0u;
  fieldactualchange_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScalarByte::~ScalarByte() {
  SharedDtor();
}

void ScalarByte::SharedDtor() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (this != default_instance_) {
  }
}

void ScalarByte::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScalarByte::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScalarByte_descriptor_;
}

const ScalarByte& ScalarByte::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

ScalarByte* ScalarByte::default_instance_ = NULL;

ScalarByte* ScalarByte::New() const {
  return new ScalarByte;
}

void ScalarByte::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secondsintoyear_ = 0u;
    nano_ = 0u;
    if (has_val()) {
      if (val_ != &::google::protobuf::internal::kEmptyString) {
        val_->clear();
      }
    }
    severity_ = 0;
    status_ = 0;
    repeatcount_ = 0u;
    fieldactualchange_ = false;
  }
  fieldvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScalarByte::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
          set_has_secondsintoyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nano;
        break;
      }
      
      // required uint32 nano = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nano:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
          set_has_nano();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_val;
        break;
      }
      
      // required bytes val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_severity;
        break;
      }
      
      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // optional int32 status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_repeatcount;
        break;
      }
      
      // optional uint32 repeatcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        break;
      }
      
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        if (input->ExpectTag(64)) goto parse_fieldactualchange;
        break;
      }
      
      // optional bool fieldactualchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldactualchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
          set_has_fieldactualchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScalarByte::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }
  
  // required bytes val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->val(), output);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fieldvalues(i), output);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScalarByte::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }
  
  // required bytes val = 3;
  if (has_val()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->val(), target);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fieldvalues(i), target);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScalarByte::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secondsintoyear = 1;
    if (has_secondsintoyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondsintoyear());
    }
    
    // required uint32 nano = 2;
    if (has_nano()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nano());
    }
    
    // required bytes val = 3;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->val());
    }
    
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }
    
    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }
    
    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1 * this->fieldvalues_size();
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScalarByte::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScalarByte* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScalarByte*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScalarByte::MergeFrom(const ScalarByte& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secondsintoyear()) {
      set_secondsintoyear(from.secondsintoyear());
    }
    if (from.has_nano()) {
      set_nano(from.nano());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
    if (from.has_fieldactualchange()) {
      set_fieldactualchange(from.fieldactualchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScalarByte::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarByte::CopyFrom(const ScalarByte& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarByte::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < fieldvalues_size(); i++) {
    if (!this->fieldvalues(i).IsInitialized()) return false;
  }
  return true;
}

void ScalarByte::Swap(ScalarByte* other) {
  if (other != this) {
    std::swap(secondsintoyear_, other->secondsintoyear_);
    std::swap(nano_, other->nano_);
    std::swap(val_, other->val_);
    std::swap(severity_, other->severity_);
    std::swap(status_, other->status_);
    std::swap(repeatcount_, other->repeatcount_);
    fieldvalues_.Swap(&other->fieldvalues_);
    std::swap(fieldactualchange_, other->fieldactualchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScalarByte::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScalarByte_descriptor_;
  metadata.reflection = ScalarByte_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScalarShort::kSecondsintoyearFieldNumber;
const int ScalarShort::kNanoFieldNumber;
const int ScalarShort::kValFieldNumber;
const int ScalarShort::kSeverityFieldNumber;
const int ScalarShort::kStatusFieldNumber;
const int ScalarShort::kRepeatcountFieldNumber;
const int ScalarShort::kFieldvaluesFieldNumber;
const int ScalarShort::kFieldactualchangeFieldNumber;
#endif  // !_MSC_VER

ScalarShort::ScalarShort()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScalarShort::InitAsDefaultInstance() {
}

ScalarShort::ScalarShort(const ScalarShort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScalarShort::SharedCtor() {
  _cached_size_ = 0;
  secondsintoyear_ = 0u;
  nano_ = 0u;
  val_ = 0;
  severity_ = 0;
  status_ = 0;
  repeatcount_ = 0u;
  fieldactualchange_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScalarShort::~ScalarShort() {
  SharedDtor();
}

void ScalarShort::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScalarShort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScalarShort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScalarShort_descriptor_;
}

const ScalarShort& ScalarShort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

ScalarShort* ScalarShort::default_instance_ = NULL;

ScalarShort* ScalarShort::New() const {
  return new ScalarShort;
}

void ScalarShort::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secondsintoyear_ = 0u;
    nano_ = 0u;
    val_ = 0;
    severity_ = 0;
    status_ = 0;
    repeatcount_ = 0u;
    fieldactualchange_ = false;
  }
  fieldvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScalarShort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
          set_has_secondsintoyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nano;
        break;
      }
      
      // required uint32 nano = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nano:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
          set_has_nano();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_val;
        break;
      }
      
      // required sint32 val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_severity;
        break;
      }
      
      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // optional int32 status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_repeatcount;
        break;
      }
      
      // optional uint32 repeatcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        break;
      }
      
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        if (input->ExpectTag(64)) goto parse_fieldactualchange;
        break;
      }
      
      // optional bool fieldactualchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldactualchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
          set_has_fieldactualchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScalarShort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }
  
  // required sint32 val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->val(), output);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fieldvalues(i), output);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScalarShort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }
  
  // required sint32 val = 3;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->val(), target);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fieldvalues(i), target);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScalarShort::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secondsintoyear = 1;
    if (has_secondsintoyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondsintoyear());
    }
    
    // required uint32 nano = 2;
    if (has_nano()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nano());
    }
    
    // required sint32 val = 3;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->val());
    }
    
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }
    
    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }
    
    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1 * this->fieldvalues_size();
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScalarShort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScalarShort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScalarShort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScalarShort::MergeFrom(const ScalarShort& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secondsintoyear()) {
      set_secondsintoyear(from.secondsintoyear());
    }
    if (from.has_nano()) {
      set_nano(from.nano());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
    if (from.has_fieldactualchange()) {
      set_fieldactualchange(from.fieldactualchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScalarShort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarShort::CopyFrom(const ScalarShort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarShort::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < fieldvalues_size(); i++) {
    if (!this->fieldvalues(i).IsInitialized()) return false;
  }
  return true;
}

void ScalarShort::Swap(ScalarShort* other) {
  if (other != this) {
    std::swap(secondsintoyear_, other->secondsintoyear_);
    std::swap(nano_, other->nano_);
    std::swap(val_, other->val_);
    std::swap(severity_, other->severity_);
    std::swap(status_, other->status_);
    std::swap(repeatcount_, other->repeatcount_);
    fieldvalues_.Swap(&other->fieldvalues_);
    std::swap(fieldactualchange_, other->fieldactualchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScalarShort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScalarShort_descriptor_;
  metadata.reflection = ScalarShort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScalarInt::kSecondsintoyearFieldNumber;
const int ScalarInt::kNanoFieldNumber;
const int ScalarInt::kValFieldNumber;
const int ScalarInt::kSeverityFieldNumber;
const int ScalarInt::kStatusFieldNumber;
const int ScalarInt::kRepeatcountFieldNumber;
const int ScalarInt::kFieldvaluesFieldNumber;
const int ScalarInt::kFieldactualchangeFieldNumber;
#endif  // !_MSC_VER

ScalarInt::ScalarInt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScalarInt::InitAsDefaultInstance() {
}

ScalarInt::ScalarInt(const ScalarInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScalarInt::SharedCtor() {
  _cached_size_ = 0;
  secondsintoyear_ = 0u;
  nano_ = 0u;
  val_ = 0;
  severity_ = 0;
  status_ = 0;
  repeatcount_ = 0u;
  fieldactualchange_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScalarInt::~ScalarInt() {
  SharedDtor();
}

void ScalarInt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScalarInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScalarInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScalarInt_descriptor_;
}

const ScalarInt& ScalarInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

ScalarInt* ScalarInt::default_instance_ = NULL;

ScalarInt* ScalarInt::New() const {
  return new ScalarInt;
}

void ScalarInt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secondsintoyear_ = 0u;
    nano_ = 0u;
    val_ = 0;
    severity_ = 0;
    status_ = 0;
    repeatcount_ = 0u;
    fieldactualchange_ = false;
  }
  fieldvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScalarInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
          set_has_secondsintoyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nano;
        break;
      }
      
      // required uint32 nano = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nano:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
          set_has_nano();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_val;
        break;
      }
      
      // required sfixed32 val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_severity;
        break;
      }
      
      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // optional int32 status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_repeatcount;
        break;
      }
      
      // optional uint32 repeatcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        break;
      }
      
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        if (input->ExpectTag(64)) goto parse_fieldactualchange;
        break;
      }
      
      // optional bool fieldactualchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldactualchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
          set_has_fieldactualchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScalarInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }
  
  // required sfixed32 val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->val(), output);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fieldvalues(i), output);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScalarInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }
  
  // required sfixed32 val = 3;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->val(), target);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fieldvalues(i), target);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScalarInt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secondsintoyear = 1;
    if (has_secondsintoyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondsintoyear());
    }
    
    // required uint32 nano = 2;
    if (has_nano()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nano());
    }
    
    // required sfixed32 val = 3;
    if (has_val()) {
      total_size += 1 + 4;
    }
    
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }
    
    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }
    
    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1 * this->fieldvalues_size();
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScalarInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScalarInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScalarInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScalarInt::MergeFrom(const ScalarInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secondsintoyear()) {
      set_secondsintoyear(from.secondsintoyear());
    }
    if (from.has_nano()) {
      set_nano(from.nano());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
    if (from.has_fieldactualchange()) {
      set_fieldactualchange(from.fieldactualchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScalarInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarInt::CopyFrom(const ScalarInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarInt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < fieldvalues_size(); i++) {
    if (!this->fieldvalues(i).IsInitialized()) return false;
  }
  return true;
}

void ScalarInt::Swap(ScalarInt* other) {
  if (other != this) {
    std::swap(secondsintoyear_, other->secondsintoyear_);
    std::swap(nano_, other->nano_);
    std::swap(val_, other->val_);
    std::swap(severity_, other->severity_);
    std::swap(status_, other->status_);
    std::swap(repeatcount_, other->repeatcount_);
    fieldvalues_.Swap(&other->fieldvalues_);
    std::swap(fieldactualchange_, other->fieldactualchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScalarInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScalarInt_descriptor_;
  metadata.reflection = ScalarInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScalarEnum::kSecondsintoyearFieldNumber;
const int ScalarEnum::kNanoFieldNumber;
const int ScalarEnum::kValFieldNumber;
const int ScalarEnum::kSeverityFieldNumber;
const int ScalarEnum::kStatusFieldNumber;
const int ScalarEnum::kRepeatcountFieldNumber;
const int ScalarEnum::kFieldvaluesFieldNumber;
const int ScalarEnum::kFieldactualchangeFieldNumber;
#endif  // !_MSC_VER

ScalarEnum::ScalarEnum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScalarEnum::InitAsDefaultInstance() {
}

ScalarEnum::ScalarEnum(const ScalarEnum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScalarEnum::SharedCtor() {
  _cached_size_ = 0;
  secondsintoyear_ = 0u;
  nano_ = 0u;
  val_ = 0;
  severity_ = 0;
  status_ = 0;
  repeatcount_ = 0u;
  fieldactualchange_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScalarEnum::~ScalarEnum() {
  SharedDtor();
}

void ScalarEnum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScalarEnum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScalarEnum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScalarEnum_descriptor_;
}

const ScalarEnum& ScalarEnum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

ScalarEnum* ScalarEnum::default_instance_ = NULL;

ScalarEnum* ScalarEnum::New() const {
  return new ScalarEnum;
}

void ScalarEnum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secondsintoyear_ = 0u;
    nano_ = 0u;
    val_ = 0;
    severity_ = 0;
    status_ = 0;
    repeatcount_ = 0u;
    fieldactualchange_ = false;
  }
  fieldvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScalarEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
          set_has_secondsintoyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nano;
        break;
      }
      
      // required uint32 nano = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nano:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
          set_has_nano();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_val;
        break;
      }
      
      // required sint32 val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_severity;
        break;
      }
      
      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // optional int32 status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_repeatcount;
        break;
      }
      
      // optional uint32 repeatcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        break;
      }
      
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        if (input->ExpectTag(64)) goto parse_fieldactualchange;
        break;
      }
      
      // optional bool fieldactualchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldactualchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
          set_has_fieldactualchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScalarEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }
  
  // required sint32 val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->val(), output);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fieldvalues(i), output);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScalarEnum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }
  
  // required sint32 val = 3;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->val(), target);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fieldvalues(i), target);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScalarEnum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secondsintoyear = 1;
    if (has_secondsintoyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondsintoyear());
    }
    
    // required uint32 nano = 2;
    if (has_nano()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nano());
    }
    
    // required sint32 val = 3;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->val());
    }
    
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }
    
    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }
    
    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1 * this->fieldvalues_size();
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScalarEnum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScalarEnum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScalarEnum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScalarEnum::MergeFrom(const ScalarEnum& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secondsintoyear()) {
      set_secondsintoyear(from.secondsintoyear());
    }
    if (from.has_nano()) {
      set_nano(from.nano());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
    if (from.has_fieldactualchange()) {
      set_fieldactualchange(from.fieldactualchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScalarEnum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarEnum::CopyFrom(const ScalarEnum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarEnum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < fieldvalues_size(); i++) {
    if (!this->fieldvalues(i).IsInitialized()) return false;
  }
  return true;
}

void ScalarEnum::Swap(ScalarEnum* other) {
  if (other != this) {
    std::swap(secondsintoyear_, other->secondsintoyear_);
    std::swap(nano_, other->nano_);
    std::swap(val_, other->val_);
    std::swap(severity_, other->severity_);
    std::swap(status_, other->status_);
    std::swap(repeatcount_, other->repeatcount_);
    fieldvalues_.Swap(&other->fieldvalues_);
    std::swap(fieldactualchange_, other->fieldactualchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScalarEnum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScalarEnum_descriptor_;
  metadata.reflection = ScalarEnum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScalarFloat::kSecondsintoyearFieldNumber;
const int ScalarFloat::kNanoFieldNumber;
const int ScalarFloat::kValFieldNumber;
const int ScalarFloat::kSeverityFieldNumber;
const int ScalarFloat::kStatusFieldNumber;
const int ScalarFloat::kRepeatcountFieldNumber;
const int ScalarFloat::kFieldvaluesFieldNumber;
const int ScalarFloat::kFieldactualchangeFieldNumber;
#endif  // !_MSC_VER

ScalarFloat::ScalarFloat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScalarFloat::InitAsDefaultInstance() {
}

ScalarFloat::ScalarFloat(const ScalarFloat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScalarFloat::SharedCtor() {
  _cached_size_ = 0;
  secondsintoyear_ = 0u;
  nano_ = 0u;
  val_ = 0;
  severity_ = 0;
  status_ = 0;
  repeatcount_ = 0u;
  fieldactualchange_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScalarFloat::~ScalarFloat() {
  SharedDtor();
}

void ScalarFloat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScalarFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScalarFloat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScalarFloat_descriptor_;
}

const ScalarFloat& ScalarFloat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

ScalarFloat* ScalarFloat::default_instance_ = NULL;

ScalarFloat* ScalarFloat::New() const {
  return new ScalarFloat;
}

void ScalarFloat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secondsintoyear_ = 0u;
    nano_ = 0u;
    val_ = 0;
    severity_ = 0;
    status_ = 0;
    repeatcount_ = 0u;
    fieldactualchange_ = false;
  }
  fieldvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScalarFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
          set_has_secondsintoyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nano;
        break;
      }
      
      // required uint32 nano = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nano:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
          set_has_nano();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_val;
        break;
      }
      
      // required float val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_severity;
        break;
      }
      
      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // optional int32 status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_repeatcount;
        break;
      }
      
      // optional uint32 repeatcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        break;
      }
      
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        if (input->ExpectTag(64)) goto parse_fieldactualchange;
        break;
      }
      
      // optional bool fieldactualchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldactualchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
          set_has_fieldactualchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScalarFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }
  
  // required float val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->val(), output);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fieldvalues(i), output);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScalarFloat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }
  
  // required float val = 3;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->val(), target);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fieldvalues(i), target);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScalarFloat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secondsintoyear = 1;
    if (has_secondsintoyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondsintoyear());
    }
    
    // required uint32 nano = 2;
    if (has_nano()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nano());
    }
    
    // required float val = 3;
    if (has_val()) {
      total_size += 1 + 4;
    }
    
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }
    
    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }
    
    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1 * this->fieldvalues_size();
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScalarFloat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScalarFloat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScalarFloat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScalarFloat::MergeFrom(const ScalarFloat& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secondsintoyear()) {
      set_secondsintoyear(from.secondsintoyear());
    }
    if (from.has_nano()) {
      set_nano(from.nano());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
    if (from.has_fieldactualchange()) {
      set_fieldactualchange(from.fieldactualchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScalarFloat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarFloat::CopyFrom(const ScalarFloat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < fieldvalues_size(); i++) {
    if (!this->fieldvalues(i).IsInitialized()) return false;
  }
  return true;
}

void ScalarFloat::Swap(ScalarFloat* other) {
  if (other != this) {
    std::swap(secondsintoyear_, other->secondsintoyear_);
    std::swap(nano_, other->nano_);
    std::swap(val_, other->val_);
    std::swap(severity_, other->severity_);
    std::swap(status_, other->status_);
    std::swap(repeatcount_, other->repeatcount_);
    fieldvalues_.Swap(&other->fieldvalues_);
    std::swap(fieldactualchange_, other->fieldactualchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScalarFloat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScalarFloat_descriptor_;
  metadata.reflection = ScalarFloat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScalarDouble::kSecondsintoyearFieldNumber;
const int ScalarDouble::kNanoFieldNumber;
const int ScalarDouble::kValFieldNumber;
const int ScalarDouble::kSeverityFieldNumber;
const int ScalarDouble::kStatusFieldNumber;
const int ScalarDouble::kRepeatcountFieldNumber;
const int ScalarDouble::kFieldvaluesFieldNumber;
const int ScalarDouble::kFieldactualchangeFieldNumber;
#endif  // !_MSC_VER

ScalarDouble::ScalarDouble()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScalarDouble::InitAsDefaultInstance() {
}

ScalarDouble::ScalarDouble(const ScalarDouble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScalarDouble::SharedCtor() {
  _cached_size_ = 0;
  secondsintoyear_ = 0u;
  nano_ = 0u;
  val_ = 0;
  severity_ = 0;
  status_ = 0;
  repeatcount_ = 0u;
  fieldactualchange_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScalarDouble::~ScalarDouble() {
  SharedDtor();
}

void ScalarDouble::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScalarDouble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScalarDouble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScalarDouble_descriptor_;
}

const ScalarDouble& ScalarDouble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

ScalarDouble* ScalarDouble::default_instance_ = NULL;

ScalarDouble* ScalarDouble::New() const {
  return new ScalarDouble;
}

void ScalarDouble::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secondsintoyear_ = 0u;
    nano_ = 0u;
    val_ = 0;
    severity_ = 0;
    status_ = 0;
    repeatcount_ = 0u;
    fieldactualchange_ = false;
  }
  fieldvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScalarDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
          set_has_secondsintoyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nano;
        break;
      }
      
      // required uint32 nano = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nano:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
          set_has_nano();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_val;
        break;
      }
      
      // required double val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_severity;
        break;
      }
      
      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // optional int32 status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_repeatcount;
        break;
      }
      
      // optional uint32 repeatcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        break;
      }
      
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        if (input->ExpectTag(64)) goto parse_fieldactualchange;
        break;
      }
      
      // optional bool fieldactualchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldactualchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
          set_has_fieldactualchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScalarDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }
  
  // required double val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->val(), output);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fieldvalues(i), output);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScalarDouble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }
  
  // required double val = 3;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->val(), target);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fieldvalues(i), target);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScalarDouble::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secondsintoyear = 1;
    if (has_secondsintoyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondsintoyear());
    }
    
    // required uint32 nano = 2;
    if (has_nano()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nano());
    }
    
    // required double val = 3;
    if (has_val()) {
      total_size += 1 + 8;
    }
    
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }
    
    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }
    
    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1 * this->fieldvalues_size();
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScalarDouble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScalarDouble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScalarDouble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScalarDouble::MergeFrom(const ScalarDouble& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secondsintoyear()) {
      set_secondsintoyear(from.secondsintoyear());
    }
    if (from.has_nano()) {
      set_nano(from.nano());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
    if (from.has_fieldactualchange()) {
      set_fieldactualchange(from.fieldactualchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScalarDouble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarDouble::CopyFrom(const ScalarDouble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarDouble::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < fieldvalues_size(); i++) {
    if (!this->fieldvalues(i).IsInitialized()) return false;
  }
  return true;
}

void ScalarDouble::Swap(ScalarDouble* other) {
  if (other != this) {
    std::swap(secondsintoyear_, other->secondsintoyear_);
    std::swap(nano_, other->nano_);
    std::swap(val_, other->val_);
    std::swap(severity_, other->severity_);
    std::swap(status_, other->status_);
    std::swap(repeatcount_, other->repeatcount_);
    fieldvalues_.Swap(&other->fieldvalues_);
    std::swap(fieldactualchange_, other->fieldactualchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScalarDouble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScalarDouble_descriptor_;
  metadata.reflection = ScalarDouble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorString::kSecondsintoyearFieldNumber;
const int VectorString::kNanoFieldNumber;
const int VectorString::kValFieldNumber;
const int VectorString::kSeverityFieldNumber;
const int VectorString::kStatusFieldNumber;
const int VectorString::kRepeatcountFieldNumber;
const int VectorString::kFieldvaluesFieldNumber;
const int VectorString::kFieldactualchangeFieldNumber;
#endif  // !_MSC_VER

VectorString::VectorString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorString::InitAsDefaultInstance() {
}

VectorString::VectorString(const VectorString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorString::SharedCtor() {
  _cached_size_ = 0;
  secondsintoyear_ = 0u;
  nano_ = 0u;
  severity_ = 0;
  status_ = 0;
  repeatcount_ = 0u;
  fieldactualchange_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorString::~VectorString() {
  SharedDtor();
}

void VectorString::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VectorString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorString_descriptor_;
}

const VectorString& VectorString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

VectorString* VectorString::default_instance_ = NULL;

VectorString* VectorString::New() const {
  return new VectorString;
}

void VectorString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secondsintoyear_ = 0u;
    nano_ = 0u;
    severity_ = 0;
    status_ = 0;
    repeatcount_ = 0u;
    fieldactualchange_ = false;
  }
  val_.Clear();
  fieldvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
          set_has_secondsintoyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nano;
        break;
      }
      
      // required uint32 nano = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nano:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
          set_has_nano();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_val;
        break;
      }
      
      // repeated string val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->val(0).data(), this->val(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_val;
        if (input->ExpectTag(32)) goto parse_severity;
        break;
      }
      
      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // optional int32 status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_repeatcount;
        break;
      }
      
      // optional uint32 repeatcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        break;
      }
      
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        if (input->ExpectTag(64)) goto parse_fieldactualchange;
        break;
      }
      
      // optional bool fieldactualchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldactualchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
          set_has_fieldactualchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }
  
  // repeated string val = 3;
  for (int i = 0; i < this->val_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->val(i).data(), this->val(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->val(i), output);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fieldvalues(i), output);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }
  
  // repeated string val = 3;
  for (int i = 0; i < this->val_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val(i).data(), this->val(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->val(i), target);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fieldvalues(i), target);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorString::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secondsintoyear = 1;
    if (has_secondsintoyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondsintoyear());
    }
    
    // required uint32 nano = 2;
    if (has_nano()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nano());
    }
    
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }
    
    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }
    
    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated string val = 3;
  total_size += 1 * this->val_size();
  for (int i = 0; i < this->val_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->val(i));
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1 * this->fieldvalues_size();
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorString::MergeFrom(const VectorString& from) {
  GOOGLE_CHECK_NE(&from, this);
  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secondsintoyear()) {
      set_secondsintoyear(from.secondsintoyear());
    }
    if (from.has_nano()) {
      set_nano(from.nano());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
    if (from.has_fieldactualchange()) {
      set_fieldactualchange(from.fieldactualchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorString::CopyFrom(const VectorString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < fieldvalues_size(); i++) {
    if (!this->fieldvalues(i).IsInitialized()) return false;
  }
  return true;
}

void VectorString::Swap(VectorString* other) {
  if (other != this) {
    std::swap(secondsintoyear_, other->secondsintoyear_);
    std::swap(nano_, other->nano_);
    val_.Swap(&other->val_);
    std::swap(severity_, other->severity_);
    std::swap(status_, other->status_);
    std::swap(repeatcount_, other->repeatcount_);
    fieldvalues_.Swap(&other->fieldvalues_);
    std::swap(fieldactualchange_, other->fieldactualchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorString_descriptor_;
  metadata.reflection = VectorString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorChar::kSecondsintoyearFieldNumber;
const int VectorChar::kNanoFieldNumber;
const int VectorChar::kValFieldNumber;
const int VectorChar::kSeverityFieldNumber;
const int VectorChar::kStatusFieldNumber;
const int VectorChar::kRepeatcountFieldNumber;
const int VectorChar::kFieldvaluesFieldNumber;
const int VectorChar::kFieldactualchangeFieldNumber;
#endif  // !_MSC_VER

VectorChar::VectorChar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorChar::InitAsDefaultInstance() {
}

VectorChar::VectorChar(const VectorChar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorChar::SharedCtor() {
  _cached_size_ = 0;
  secondsintoyear_ = 0u;
  nano_ = 0u;
  val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  severity_ = 0;
  status_ = 0;
  repeatcount_ = 0u;
  fieldactualchange_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorChar::~VectorChar() {
  SharedDtor();
}

void VectorChar::SharedDtor() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (this != default_instance_) {
  }
}

void VectorChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorChar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorChar_descriptor_;
}

const VectorChar& VectorChar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

VectorChar* VectorChar::default_instance_ = NULL;

VectorChar* VectorChar::New() const {
  return new VectorChar;
}

void VectorChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secondsintoyear_ = 0u;
    nano_ = 0u;
    if (has_val()) {
      if (val_ != &::google::protobuf::internal::kEmptyString) {
        val_->clear();
      }
    }
    severity_ = 0;
    status_ = 0;
    repeatcount_ = 0u;
    fieldactualchange_ = false;
  }
  fieldvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
          set_has_secondsintoyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nano;
        break;
      }
      
      // required uint32 nano = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nano:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
          set_has_nano();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_val;
        break;
      }
      
      // required bytes val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_severity;
        break;
      }
      
      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // optional int32 status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_repeatcount;
        break;
      }
      
      // optional uint32 repeatcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        break;
      }
      
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        if (input->ExpectTag(64)) goto parse_fieldactualchange;
        break;
      }
      
      // optional bool fieldactualchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldactualchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
          set_has_fieldactualchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }
  
  // required bytes val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->val(), output);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fieldvalues(i), output);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorChar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }
  
  // required bytes val = 3;
  if (has_val()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->val(), target);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fieldvalues(i), target);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorChar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secondsintoyear = 1;
    if (has_secondsintoyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondsintoyear());
    }
    
    // required uint32 nano = 2;
    if (has_nano()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nano());
    }
    
    // required bytes val = 3;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->val());
    }
    
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }
    
    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }
    
    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1 * this->fieldvalues_size();
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorChar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorChar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorChar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorChar::MergeFrom(const VectorChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secondsintoyear()) {
      set_secondsintoyear(from.secondsintoyear());
    }
    if (from.has_nano()) {
      set_nano(from.nano());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
    if (from.has_fieldactualchange()) {
      set_fieldactualchange(from.fieldactualchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorChar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorChar::CopyFrom(const VectorChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorChar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < fieldvalues_size(); i++) {
    if (!this->fieldvalues(i).IsInitialized()) return false;
  }
  return true;
}

void VectorChar::Swap(VectorChar* other) {
  if (other != this) {
    std::swap(secondsintoyear_, other->secondsintoyear_);
    std::swap(nano_, other->nano_);
    std::swap(val_, other->val_);
    std::swap(severity_, other->severity_);
    std::swap(status_, other->status_);
    std::swap(repeatcount_, other->repeatcount_);
    fieldvalues_.Swap(&other->fieldvalues_);
    std::swap(fieldactualchange_, other->fieldactualchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorChar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorChar_descriptor_;
  metadata.reflection = VectorChar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorShort::kSecondsintoyearFieldNumber;
const int VectorShort::kNanoFieldNumber;
const int VectorShort::kValFieldNumber;
const int VectorShort::kSeverityFieldNumber;
const int VectorShort::kStatusFieldNumber;
const int VectorShort::kRepeatcountFieldNumber;
const int VectorShort::kFieldvaluesFieldNumber;
const int VectorShort::kFieldactualchangeFieldNumber;
#endif  // !_MSC_VER

VectorShort::VectorShort()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorShort::InitAsDefaultInstance() {
}

VectorShort::VectorShort(const VectorShort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorShort::SharedCtor() {
  _cached_size_ = 0;
  secondsintoyear_ = 0u;
  nano_ = 0u;
  severity_ = 0;
  status_ = 0;
  repeatcount_ = 0u;
  fieldactualchange_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorShort::~VectorShort() {
  SharedDtor();
}

void VectorShort::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VectorShort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorShort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorShort_descriptor_;
}

const VectorShort& VectorShort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

VectorShort* VectorShort::default_instance_ = NULL;

VectorShort* VectorShort::New() const {
  return new VectorShort;
}

void VectorShort::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secondsintoyear_ = 0u;
    nano_ = 0u;
    severity_ = 0;
    status_ = 0;
    repeatcount_ = 0u;
    fieldactualchange_ = false;
  }
  val_.Clear();
  fieldvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorShort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
          set_has_secondsintoyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nano;
        break;
      }
      
      // required uint32 nano = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nano:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
          set_has_nano();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_val;
        break;
      }
      
      // repeated sint32 val = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_val())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 26, input, this->mutable_val())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_severity;
        break;
      }
      
      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // optional int32 status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_repeatcount;
        break;
      }
      
      // optional uint32 repeatcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        break;
      }
      
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        if (input->ExpectTag(64)) goto parse_fieldactualchange;
        break;
      }
      
      // optional bool fieldactualchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldactualchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
          set_has_fieldactualchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorShort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }
  
  // repeated sint32 val = 3 [packed = true];
  if (this->val_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_val_cached_byte_size_);
  }
  for (int i = 0; i < this->val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->val(i), output);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fieldvalues(i), output);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorShort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }
  
  // repeated sint32 val = 3 [packed = true];
  if (this->val_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _val_cached_byte_size_, target);
  }
  for (int i = 0; i < this->val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->val(i), target);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fieldvalues(i), target);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorShort::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secondsintoyear = 1;
    if (has_secondsintoyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondsintoyear());
    }
    
    // required uint32 nano = 2;
    if (has_nano()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nano());
    }
    
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }
    
    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }
    
    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated sint32 val = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->val_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->val(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _val_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1 * this->fieldvalues_size();
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorShort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorShort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorShort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorShort::MergeFrom(const VectorShort& from) {
  GOOGLE_CHECK_NE(&from, this);
  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secondsintoyear()) {
      set_secondsintoyear(from.secondsintoyear());
    }
    if (from.has_nano()) {
      set_nano(from.nano());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
    if (from.has_fieldactualchange()) {
      set_fieldactualchange(from.fieldactualchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorShort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorShort::CopyFrom(const VectorShort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorShort::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < fieldvalues_size(); i++) {
    if (!this->fieldvalues(i).IsInitialized()) return false;
  }
  return true;
}

void VectorShort::Swap(VectorShort* other) {
  if (other != this) {
    std::swap(secondsintoyear_, other->secondsintoyear_);
    std::swap(nano_, other->nano_);
    val_.Swap(&other->val_);
    std::swap(severity_, other->severity_);
    std::swap(status_, other->status_);
    std::swap(repeatcount_, other->repeatcount_);
    fieldvalues_.Swap(&other->fieldvalues_);
    std::swap(fieldactualchange_, other->fieldactualchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorShort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorShort_descriptor_;
  metadata.reflection = VectorShort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorInt::kSecondsintoyearFieldNumber;
const int VectorInt::kNanoFieldNumber;
const int VectorInt::kValFieldNumber;
const int VectorInt::kSeverityFieldNumber;
const int VectorInt::kStatusFieldNumber;
const int VectorInt::kRepeatcountFieldNumber;
const int VectorInt::kFieldvaluesFieldNumber;
const int VectorInt::kFieldactualchangeFieldNumber;
#endif  // !_MSC_VER

VectorInt::VectorInt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorInt::InitAsDefaultInstance() {
}

VectorInt::VectorInt(const VectorInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorInt::SharedCtor() {
  _cached_size_ = 0;
  secondsintoyear_ = 0u;
  nano_ = 0u;
  severity_ = 0;
  status_ = 0;
  repeatcount_ = 0u;
  fieldactualchange_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorInt::~VectorInt() {
  SharedDtor();
}

void VectorInt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VectorInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorInt_descriptor_;
}

const VectorInt& VectorInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

VectorInt* VectorInt::default_instance_ = NULL;

VectorInt* VectorInt::New() const {
  return new VectorInt;
}

void VectorInt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secondsintoyear_ = 0u;
    nano_ = 0u;
    severity_ = 0;
    status_ = 0;
    repeatcount_ = 0u;
    fieldactualchange_ = false;
  }
  val_.Clear();
  fieldvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
          set_has_secondsintoyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nano;
        break;
      }
      
      // required uint32 nano = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nano:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
          set_has_nano();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_val;
        break;
      }
      
      // repeated sfixed32 val = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, this->mutable_val())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 1, 26, input, this->mutable_val())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_severity;
        break;
      }
      
      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // optional int32 status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_repeatcount;
        break;
      }
      
      // optional uint32 repeatcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        break;
      }
      
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        if (input->ExpectTag(64)) goto parse_fieldactualchange;
        break;
      }
      
      // optional bool fieldactualchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldactualchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
          set_has_fieldactualchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }
  
  // repeated sfixed32 val = 3 [packed = true];
  if (this->val_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_val_cached_byte_size_);
  }
  for (int i = 0; i < this->val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32NoTag(
      this->val(i), output);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fieldvalues(i), output);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }
  
  // repeated sfixed32 val = 3 [packed = true];
  if (this->val_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _val_cached_byte_size_, target);
  }
  for (int i = 0; i < this->val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSFixed32NoTagToArray(this->val(i), target);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fieldvalues(i), target);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorInt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secondsintoyear = 1;
    if (has_secondsintoyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondsintoyear());
    }
    
    // required uint32 nano = 2;
    if (has_nano()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nano());
    }
    
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }
    
    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }
    
    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated sfixed32 val = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->val_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _val_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1 * this->fieldvalues_size();
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorInt::MergeFrom(const VectorInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secondsintoyear()) {
      set_secondsintoyear(from.secondsintoyear());
    }
    if (from.has_nano()) {
      set_nano(from.nano());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
    if (from.has_fieldactualchange()) {
      set_fieldactualchange(from.fieldactualchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorInt::CopyFrom(const VectorInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorInt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < fieldvalues_size(); i++) {
    if (!this->fieldvalues(i).IsInitialized()) return false;
  }
  return true;
}

void VectorInt::Swap(VectorInt* other) {
  if (other != this) {
    std::swap(secondsintoyear_, other->secondsintoyear_);
    std::swap(nano_, other->nano_);
    val_.Swap(&other->val_);
    std::swap(severity_, other->severity_);
    std::swap(status_, other->status_);
    std::swap(repeatcount_, other->repeatcount_);
    fieldvalues_.Swap(&other->fieldvalues_);
    std::swap(fieldactualchange_, other->fieldactualchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorInt_descriptor_;
  metadata.reflection = VectorInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorEnum::kSecondsintoyearFieldNumber;
const int VectorEnum::kNanoFieldNumber;
const int VectorEnum::kValFieldNumber;
const int VectorEnum::kSeverityFieldNumber;
const int VectorEnum::kStatusFieldNumber;
const int VectorEnum::kRepeatcountFieldNumber;
const int VectorEnum::kFieldvaluesFieldNumber;
const int VectorEnum::kFieldactualchangeFieldNumber;
#endif  // !_MSC_VER

VectorEnum::VectorEnum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorEnum::InitAsDefaultInstance() {
}

VectorEnum::VectorEnum(const VectorEnum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorEnum::SharedCtor() {
  _cached_size_ = 0;
  secondsintoyear_ = 0u;
  nano_ = 0u;
  severity_ = 0;
  status_ = 0;
  repeatcount_ = 0u;
  fieldactualchange_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorEnum::~VectorEnum() {
  SharedDtor();
}

void VectorEnum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VectorEnum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorEnum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorEnum_descriptor_;
}

const VectorEnum& VectorEnum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

VectorEnum* VectorEnum::default_instance_ = NULL;

VectorEnum* VectorEnum::New() const {
  return new VectorEnum;
}

void VectorEnum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secondsintoyear_ = 0u;
    nano_ = 0u;
    severity_ = 0;
    status_ = 0;
    repeatcount_ = 0u;
    fieldactualchange_ = false;
  }
  val_.Clear();
  fieldvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorEnum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
          set_has_secondsintoyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nano;
        break;
      }
      
      // required uint32 nano = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nano:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
          set_has_nano();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_val;
        break;
      }
      
      // repeated sint32 val = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_val())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 26, input, this->mutable_val())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_severity;
        break;
      }
      
      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // optional int32 status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_repeatcount;
        break;
      }
      
      // optional uint32 repeatcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        break;
      }
      
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        if (input->ExpectTag(64)) goto parse_fieldactualchange;
        break;
      }
      
      // optional bool fieldactualchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldactualchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
          set_has_fieldactualchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorEnum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }
  
  // repeated sint32 val = 3 [packed = true];
  if (this->val_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_val_cached_byte_size_);
  }
  for (int i = 0; i < this->val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->val(i), output);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fieldvalues(i), output);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorEnum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }
  
  // repeated sint32 val = 3 [packed = true];
  if (this->val_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _val_cached_byte_size_, target);
  }
  for (int i = 0; i < this->val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->val(i), target);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fieldvalues(i), target);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorEnum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secondsintoyear = 1;
    if (has_secondsintoyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondsintoyear());
    }
    
    // required uint32 nano = 2;
    if (has_nano()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nano());
    }
    
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }
    
    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }
    
    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated sint32 val = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->val_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->val(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _val_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1 * this->fieldvalues_size();
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorEnum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorEnum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorEnum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorEnum::MergeFrom(const VectorEnum& from) {
  GOOGLE_CHECK_NE(&from, this);
  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secondsintoyear()) {
      set_secondsintoyear(from.secondsintoyear());
    }
    if (from.has_nano()) {
      set_nano(from.nano());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
    if (from.has_fieldactualchange()) {
      set_fieldactualchange(from.fieldactualchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorEnum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorEnum::CopyFrom(const VectorEnum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorEnum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < fieldvalues_size(); i++) {
    if (!this->fieldvalues(i).IsInitialized()) return false;
  }
  return true;
}

void VectorEnum::Swap(VectorEnum* other) {
  if (other != this) {
    std::swap(secondsintoyear_, other->secondsintoyear_);
    std::swap(nano_, other->nano_);
    val_.Swap(&other->val_);
    std::swap(severity_, other->severity_);
    std::swap(status_, other->status_);
    std::swap(repeatcount_, other->repeatcount_);
    fieldvalues_.Swap(&other->fieldvalues_);
    std::swap(fieldactualchange_, other->fieldactualchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorEnum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorEnum_descriptor_;
  metadata.reflection = VectorEnum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorFloat::kSecondsintoyearFieldNumber;
const int VectorFloat::kNanoFieldNumber;
const int VectorFloat::kValFieldNumber;
const int VectorFloat::kSeverityFieldNumber;
const int VectorFloat::kStatusFieldNumber;
const int VectorFloat::kRepeatcountFieldNumber;
const int VectorFloat::kFieldvaluesFieldNumber;
const int VectorFloat::kFieldactualchangeFieldNumber;
#endif  // !_MSC_VER

VectorFloat::VectorFloat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorFloat::InitAsDefaultInstance() {
}

VectorFloat::VectorFloat(const VectorFloat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorFloat::SharedCtor() {
  _cached_size_ = 0;
  secondsintoyear_ = 0u;
  nano_ = 0u;
  severity_ = 0;
  status_ = 0;
  repeatcount_ = 0u;
  fieldactualchange_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorFloat::~VectorFloat() {
  SharedDtor();
}

void VectorFloat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VectorFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorFloat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorFloat_descriptor_;
}

const VectorFloat& VectorFloat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

VectorFloat* VectorFloat::default_instance_ = NULL;

VectorFloat* VectorFloat::New() const {
  return new VectorFloat;
}

void VectorFloat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secondsintoyear_ = 0u;
    nano_ = 0u;
    severity_ = 0;
    status_ = 0;
    repeatcount_ = 0u;
    fieldactualchange_ = false;
  }
  val_.Clear();
  fieldvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
          set_has_secondsintoyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nano;
        break;
      }
      
      // required uint32 nano = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nano:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
          set_has_nano();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_val;
        break;
      }
      
      // repeated float val = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_val())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_val())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_severity;
        break;
      }
      
      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // optional int32 status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_repeatcount;
        break;
      }
      
      // optional uint32 repeatcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        break;
      }
      
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        if (input->ExpectTag(64)) goto parse_fieldactualchange;
        break;
      }
      
      // optional bool fieldactualchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldactualchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
          set_has_fieldactualchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }
  
  // repeated float val = 3 [packed = true];
  if (this->val_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_val_cached_byte_size_);
  }
  for (int i = 0; i < this->val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->val(i), output);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fieldvalues(i), output);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorFloat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }
  
  // repeated float val = 3 [packed = true];
  if (this->val_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _val_cached_byte_size_, target);
  }
  for (int i = 0; i < this->val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->val(i), target);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fieldvalues(i), target);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorFloat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secondsintoyear = 1;
    if (has_secondsintoyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondsintoyear());
    }
    
    // required uint32 nano = 2;
    if (has_nano()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nano());
    }
    
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }
    
    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }
    
    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated float val = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->val_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _val_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1 * this->fieldvalues_size();
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorFloat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorFloat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorFloat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorFloat::MergeFrom(const VectorFloat& from) {
  GOOGLE_CHECK_NE(&from, this);
  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secondsintoyear()) {
      set_secondsintoyear(from.secondsintoyear());
    }
    if (from.has_nano()) {
      set_nano(from.nano());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
    if (from.has_fieldactualchange()) {
      set_fieldactualchange(from.fieldactualchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorFloat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorFloat::CopyFrom(const VectorFloat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < fieldvalues_size(); i++) {
    if (!this->fieldvalues(i).IsInitialized()) return false;
  }
  return true;
}

void VectorFloat::Swap(VectorFloat* other) {
  if (other != this) {
    std::swap(secondsintoyear_, other->secondsintoyear_);
    std::swap(nano_, other->nano_);
    val_.Swap(&other->val_);
    std::swap(severity_, other->severity_);
    std::swap(status_, other->status_);
    std::swap(repeatcount_, other->repeatcount_);
    fieldvalues_.Swap(&other->fieldvalues_);
    std::swap(fieldactualchange_, other->fieldactualchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorFloat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorFloat_descriptor_;
  metadata.reflection = VectorFloat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VectorDouble::kSecondsintoyearFieldNumber;
const int VectorDouble::kNanoFieldNumber;
const int VectorDouble::kValFieldNumber;
const int VectorDouble::kSeverityFieldNumber;
const int VectorDouble::kStatusFieldNumber;
const int VectorDouble::kRepeatcountFieldNumber;
const int VectorDouble::kFieldvaluesFieldNumber;
const int VectorDouble::kFieldactualchangeFieldNumber;
#endif  // !_MSC_VER

VectorDouble::VectorDouble()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VectorDouble::InitAsDefaultInstance() {
}

VectorDouble::VectorDouble(const VectorDouble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VectorDouble::SharedCtor() {
  _cached_size_ = 0;
  secondsintoyear_ = 0u;
  nano_ = 0u;
  severity_ = 0;
  status_ = 0;
  repeatcount_ = 0u;
  fieldactualchange_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorDouble::~VectorDouble() {
  SharedDtor();
}

void VectorDouble::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VectorDouble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorDouble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorDouble_descriptor_;
}

const VectorDouble& VectorDouble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

VectorDouble* VectorDouble::default_instance_ = NULL;

VectorDouble* VectorDouble::New() const {
  return new VectorDouble;
}

void VectorDouble::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secondsintoyear_ = 0u;
    nano_ = 0u;
    severity_ = 0;
    status_ = 0;
    repeatcount_ = 0u;
    fieldactualchange_ = false;
  }
  val_.Clear();
  fieldvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
          set_has_secondsintoyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nano;
        break;
      }
      
      // required uint32 nano = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nano:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
          set_has_nano();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_val;
        break;
      }
      
      // repeated double val = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_val())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_val())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_severity;
        break;
      }
      
      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // optional int32 status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_repeatcount;
        break;
      }
      
      // optional uint32 repeatcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        break;
      }
      
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        if (input->ExpectTag(64)) goto parse_fieldactualchange;
        break;
      }
      
      // optional bool fieldactualchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldactualchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
          set_has_fieldactualchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VectorDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }
  
  // repeated double val = 3 [packed = true];
  if (this->val_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_val_cached_byte_size_);
  }
  for (int i = 0; i < this->val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->val(i), output);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fieldvalues(i), output);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VectorDouble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }
  
  // repeated double val = 3 [packed = true];
  if (this->val_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _val_cached_byte_size_, target);
  }
  for (int i = 0; i < this->val_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->val(i), target);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fieldvalues(i), target);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VectorDouble::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secondsintoyear = 1;
    if (has_secondsintoyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondsintoyear());
    }
    
    // required uint32 nano = 2;
    if (has_nano()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nano());
    }
    
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }
    
    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }
    
    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated double val = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->val_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _val_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1 * this->fieldvalues_size();
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorDouble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorDouble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorDouble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorDouble::MergeFrom(const VectorDouble& from) {
  GOOGLE_CHECK_NE(&from, this);
  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secondsintoyear()) {
      set_secondsintoyear(from.secondsintoyear());
    }
    if (from.has_nano()) {
      set_nano(from.nano());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
    if (from.has_fieldactualchange()) {
      set_fieldactualchange(from.fieldactualchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorDouble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorDouble::CopyFrom(const VectorDouble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorDouble::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < fieldvalues_size(); i++) {
    if (!this->fieldvalues(i).IsInitialized()) return false;
  }
  return true;
}

void VectorDouble::Swap(VectorDouble* other) {
  if (other != this) {
    std::swap(secondsintoyear_, other->secondsintoyear_);
    std::swap(nano_, other->nano_);
    val_.Swap(&other->val_);
    std::swap(severity_, other->severity_);
    std::swap(status_, other->status_);
    std::swap(repeatcount_, other->repeatcount_);
    fieldvalues_.Swap(&other->fieldvalues_);
    std::swap(fieldactualchange_, other->fieldactualchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorDouble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorDouble_descriptor_;
  metadata.reflection = VectorDouble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int V4GenericBytes::kSecondsintoyearFieldNumber;
const int V4GenericBytes::kNanoFieldNumber;
const int V4GenericBytes::kValFieldNumber;
const int V4GenericBytes::kSeverityFieldNumber;
const int V4GenericBytes::kStatusFieldNumber;
const int V4GenericBytes::kRepeatcountFieldNumber;
const int V4GenericBytes::kFieldvaluesFieldNumber;
const int V4GenericBytes::kFieldactualchangeFieldNumber;
#endif  // !_MSC_VER

V4GenericBytes::V4GenericBytes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void V4GenericBytes::InitAsDefaultInstance() {
}

V4GenericBytes::V4GenericBytes(const V4GenericBytes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void V4GenericBytes::SharedCtor() {
  _cached_size_ = 0;
  secondsintoyear_ = 0u;
  nano_ = 0u;
  val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  severity_ = 0;
  status_ = 0;
  repeatcount_ = 0u;
  fieldactualchange_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

V4GenericBytes::~V4GenericBytes() {
  SharedDtor();
}

void V4GenericBytes::SharedDtor() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (this != default_instance_) {
  }
}

void V4GenericBytes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* V4GenericBytes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return V4GenericBytes_descriptor_;
}

const V4GenericBytes& V4GenericBytes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

V4GenericBytes* V4GenericBytes::default_instance_ = NULL;

V4GenericBytes* V4GenericBytes::New() const {
  return new V4GenericBytes;
}

void V4GenericBytes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secondsintoyear_ = 0u;
    nano_ = 0u;
    if (has_val()) {
      if (val_ != &::google::protobuf::internal::kEmptyString) {
        val_->clear();
      }
    }
    severity_ = 0;
    status_ = 0;
    repeatcount_ = 0u;
    fieldactualchange_ = false;
  }
  fieldvalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool V4GenericBytes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 secondsintoyear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondsintoyear_)));
          set_has_secondsintoyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nano;
        break;
      }
      
      // required uint32 nano = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nano:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nano_)));
          set_has_nano();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_val;
        break;
      }
      
      // required bytes val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_severity;
        break;
      }
      
      // optional int32 severity = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_severity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &severity_)));
          set_has_severity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // optional int32 status = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_repeatcount;
        break;
      }
      
      // optional uint32 repeatcount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repeatcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatcount_)));
          set_has_repeatcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        break;
      }
      
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldvalues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldvalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fieldvalues;
        if (input->ExpectTag(64)) goto parse_fieldactualchange;
        break;
      }
      
      // optional bool fieldactualchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldactualchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fieldactualchange_)));
          set_has_fieldactualchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void V4GenericBytes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->secondsintoyear(), output);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nano(), output);
  }
  
  // required bytes val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->val(), output);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->severity(), output);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->repeatcount(), output);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fieldvalues(i), output);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fieldactualchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* V4GenericBytes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 secondsintoyear = 1;
  if (has_secondsintoyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->secondsintoyear(), target);
  }
  
  // required uint32 nano = 2;
  if (has_nano()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nano(), target);
  }
  
  // required bytes val = 3;
  if (has_val()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->val(), target);
  }
  
  // optional int32 severity = 4 [default = 0];
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->severity(), target);
  }
  
  // optional int32 status = 5 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // optional uint32 repeatcount = 6;
  if (has_repeatcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->repeatcount(), target);
  }
  
  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fieldvalues(i), target);
  }
  
  // optional bool fieldactualchange = 8;
  if (has_fieldactualchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fieldactualchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int V4GenericBytes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 secondsintoyear = 1;
    if (has_secondsintoyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondsintoyear());
    }
    
    // required uint32 nano = 2;
    if (has_nano()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nano());
    }
    
    // required bytes val = 3;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->val());
    }
    
    // optional int32 severity = 4 [default = 0];
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->severity());
    }
    
    // optional int32 status = 5 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional uint32 repeatcount = 6;
    if (has_repeatcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatcount());
    }
    
    // optional bool fieldactualchange = 8;
    if (has_fieldactualchange()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1 * this->fieldvalues_size();
  for (int i = 0; i < this->fieldvalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldvalues(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void V4GenericBytes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const V4GenericBytes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const V4GenericBytes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void V4GenericBytes::MergeFrom(const V4GenericBytes& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secondsintoyear()) {
      set_secondsintoyear(from.secondsintoyear());
    }
    if (from.has_nano()) {
      set_nano(from.nano());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_repeatcount()) {
      set_repeatcount(from.repeatcount());
    }
    if (from.has_fieldactualchange()) {
      set_fieldactualchange(from.fieldactualchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void V4GenericBytes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V4GenericBytes::CopyFrom(const V4GenericBytes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V4GenericBytes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < fieldvalues_size(); i++) {
    if (!this->fieldvalues(i).IsInitialized()) return false;
  }
  return true;
}

void V4GenericBytes::Swap(V4GenericBytes* other) {
  if (other != this) {
    std::swap(secondsintoyear_, other->secondsintoyear_);
    std::swap(nano_, other->nano_);
    std::swap(val_, other->val_);
    std::swap(severity_, other->severity_);
    std::swap(status_, other->status_);
    std::swap(repeatcount_, other->repeatcount_);
    fieldvalues_.Swap(&other->fieldvalues_);
    std::swap(fieldactualchange_, other->fieldactualchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata V4GenericBytes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = V4GenericBytes_descriptor_;
  metadata.reflection = V4GenericBytes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayloadInfo::kTypeFieldNumber;
const int PayloadInfo::kPvnameFieldNumber;
const int PayloadInfo::kYearFieldNumber;
const int PayloadInfo::kElementCountFieldNumber;
const int PayloadInfo::kUnused00FieldNumber;
const int PayloadInfo::kUnused01FieldNumber;
const int PayloadInfo::kUnused02FieldNumber;
const int PayloadInfo::kUnused03FieldNumber;
const int PayloadInfo::kUnused04FieldNumber;
const int PayloadInfo::kUnused05FieldNumber;
const int PayloadInfo::kUnused06FieldNumber;
const int PayloadInfo::kUnused07FieldNumber;
const int PayloadInfo::kUnused08FieldNumber;
const int PayloadInfo::kUnused09FieldNumber;
const int PayloadInfo::kHeadersFieldNumber;
#endif  // !_MSC_VER

PayloadInfo::PayloadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayloadInfo::InitAsDefaultInstance() {
}

PayloadInfo::PayloadInfo(const PayloadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayloadInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  pvname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  year_ = 0;
  elementcount_ = 0;
  unused00_ = 0;
  unused01_ = 0;
  unused02_ = 0;
  unused03_ = 0;
  unused04_ = 0;
  unused05_ = 0;
  unused06_ = 0;
  unused07_ = 0;
  unused08_ = 0;
  unused09_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayloadInfo::~PayloadInfo() {
  SharedDtor();
}

void PayloadInfo::SharedDtor() {
  if (pvname_ != &::google::protobuf::internal::kEmptyString) {
    delete pvname_;
  }
  if (unused09_ != &::google::protobuf::internal::kEmptyString) {
    delete unused09_;
  }
  if (this != default_instance_) {
  }
}

void PayloadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayloadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayloadInfo_descriptor_;
}

const PayloadInfo& PayloadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EPICSEvent_2eproto();  return *default_instance_;
}

PayloadInfo* PayloadInfo::default_instance_ = NULL;

PayloadInfo* PayloadInfo::New() const {
  return new PayloadInfo;
}

void PayloadInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_pvname()) {
      if (pvname_ != &::google::protobuf::internal::kEmptyString) {
        pvname_->clear();
      }
    }
    year_ = 0;
    elementcount_ = 0;
    unused00_ = 0;
    unused01_ = 0;
    unused02_ = 0;
    unused03_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    unused04_ = 0;
    unused05_ = 0;
    unused06_ = 0;
    unused07_ = 0;
    unused08_ = 0;
    if (has_unused09()) {
      if (unused09_ != &::google::protobuf::internal::kEmptyString) {
        unused09_->clear();
      }
    }
  }
  headers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayloadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EPICS.PayloadType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EPICS::PayloadType_IsValid(value)) {
            set_type(static_cast< EPICS::PayloadType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pvname;
        break;
      }
      
      // required string pvname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pvname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pvname().data(), this->pvname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_year;
        break;
      }
      
      // required int32 year = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_elementCount;
        break;
      }
      
      // optional int32 elementCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elementCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elementcount_)));
          set_has_elementcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_unused00;
        break;
      }
      
      // optional double unused00 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_unused00:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused00_)));
          set_has_unused00();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_unused01;
        break;
      }
      
      // optional double unused01 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_unused01:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused01_)));
          set_has_unused01();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_unused02;
        break;
      }
      
      // optional double unused02 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_unused02:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused02_)));
          set_has_unused02();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_unused03;
        break;
      }
      
      // optional double unused03 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_unused03:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused03_)));
          set_has_unused03();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_unused04;
        break;
      }
      
      // optional double unused04 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_unused04:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused04_)));
          set_has_unused04();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_unused05;
        break;
      }
      
      // optional double unused05 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_unused05:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused05_)));
          set_has_unused05();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_unused06;
        break;
      }
      
      // optional double unused06 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_unused06:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused06_)));
          set_has_unused06();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_unused07;
        break;
      }
      
      // optional double unused07 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_unused07:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused07_)));
          set_has_unused07();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_unused08;
        break;
      }
      
      // optional double unused08 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_unused08:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &unused08_)));
          set_has_unused08();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_unused09;
        break;
      }
      
      // optional string unused09 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unused09:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unused09()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unused09().data(), this->unused09().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_headers;
        break;
      }
      
      // repeated .EPICS.FieldValue headers = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_headers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_headers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayloadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EPICS.PayloadType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required string pvname = 2;
  if (has_pvname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pvname().data(), this->pvname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pvname(), output);
  }
  
  // required int32 year = 3;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->year(), output);
  }
  
  // optional int32 elementCount = 4;
  if (has_elementcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->elementcount(), output);
  }
  
  // optional double unused00 = 5;
  if (has_unused00()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->unused00(), output);
  }
  
  // optional double unused01 = 6;
  if (has_unused01()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->unused01(), output);
  }
  
  // optional double unused02 = 7;
  if (has_unused02()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->unused02(), output);
  }
  
  // optional double unused03 = 8;
  if (has_unused03()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->unused03(), output);
  }
  
  // optional double unused04 = 9;
  if (has_unused04()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->unused04(), output);
  }
  
  // optional double unused05 = 10;
  if (has_unused05()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->unused05(), output);
  }
  
  // optional double unused06 = 11;
  if (has_unused06()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->unused06(), output);
  }
  
  // optional double unused07 = 12;
  if (has_unused07()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->unused07(), output);
  }
  
  // optional double unused08 = 13;
  if (has_unused08()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->unused08(), output);
  }
  
  // optional string unused09 = 14;
  if (has_unused09()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unused09().data(), this->unused09().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->unused09(), output);
  }
  
  // repeated .EPICS.FieldValue headers = 15;
  for (int i = 0; i < this->headers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->headers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayloadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EPICS.PayloadType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required string pvname = 2;
  if (has_pvname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pvname().data(), this->pvname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pvname(), target);
  }
  
  // required int32 year = 3;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->year(), target);
  }
  
  // optional int32 elementCount = 4;
  if (has_elementcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->elementcount(), target);
  }
  
  // optional double unused00 = 5;
  if (has_unused00()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->unused00(), target);
  }
  
  // optional double unused01 = 6;
  if (has_unused01()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->unused01(), target);
  }
  
  // optional double unused02 = 7;
  if (has_unused02()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->unused02(), target);
  }
  
  // optional double unused03 = 8;
  if (has_unused03()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->unused03(), target);
  }
  
  // optional double unused04 = 9;
  if (has_unused04()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->unused04(), target);
  }
  
  // optional double unused05 = 10;
  if (has_unused05()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->unused05(), target);
  }
  
  // optional double unused06 = 11;
  if (has_unused06()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->unused06(), target);
  }
  
  // optional double unused07 = 12;
  if (has_unused07()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->unused07(), target);
  }
  
  // optional double unused08 = 13;
  if (has_unused08()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->unused08(), target);
  }
  
  // optional string unused09 = 14;
  if (has_unused09()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unused09().data(), this->unused09().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->unused09(), target);
  }
  
  // repeated .EPICS.FieldValue headers = 15;
  for (int i = 0; i < this->headers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->headers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayloadInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EPICS.PayloadType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required string pvname = 2;
    if (has_pvname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pvname());
    }
    
    // required int32 year = 3;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }
    
    // optional int32 elementCount = 4;
    if (has_elementcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elementcount());
    }
    
    // optional double unused00 = 5;
    if (has_unused00()) {
      total_size += 1 + 8;
    }
    
    // optional double unused01 = 6;
    if (has_unused01()) {
      total_size += 1 + 8;
    }
    
    // optional double unused02 = 7;
    if (has_unused02()) {
      total_size += 1 + 8;
    }
    
    // optional double unused03 = 8;
    if (has_unused03()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double unused04 = 9;
    if (has_unused04()) {
      total_size += 1 + 8;
    }
    
    // optional double unused05 = 10;
    if (has_unused05()) {
      total_size += 1 + 8;
    }
    
    // optional double unused06 = 11;
    if (has_unused06()) {
      total_size += 1 + 8;
    }
    
    // optional double unused07 = 12;
    if (has_unused07()) {
      total_size += 1 + 8;
    }
    
    // optional double unused08 = 13;
    if (has_unused08()) {
      total_size += 1 + 8;
    }
    
    // optional string unused09 = 14;
    if (has_unused09()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unused09());
    }
    
  }
  // repeated .EPICS.FieldValue headers = 15;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->headers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayloadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayloadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayloadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayloadInfo::MergeFrom(const PayloadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  headers_.MergeFrom(from.headers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pvname()) {
      set_pvname(from.pvname());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_elementcount()) {
      set_elementcount(from.elementcount());
    }
    if (from.has_unused00()) {
      set_unused00(from.unused00());
    }
    if (from.has_unused01()) {
      set_unused01(from.unused01());
    }
    if (from.has_unused02()) {
      set_unused02(from.unused02());
    }
    if (from.has_unused03()) {
      set_unused03(from.unused03());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_unused04()) {
      set_unused04(from.unused04());
    }
    if (from.has_unused05()) {
      set_unused05(from.unused05());
    }
    if (from.has_unused06()) {
      set_unused06(from.unused06());
    }
    if (from.has_unused07()) {
      set_unused07(from.unused07());
    }
    if (from.has_unused08()) {
      set_unused08(from.unused08());
    }
    if (from.has_unused09()) {
      set_unused09(from.unused09());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayloadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayloadInfo::CopyFrom(const PayloadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < headers_size(); i++) {
    if (!this->headers(i).IsInitialized()) return false;
  }
  return true;
}

void PayloadInfo::Swap(PayloadInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(pvname_, other->pvname_);
    std::swap(year_, other->year_);
    std::swap(elementcount_, other->elementcount_);
    std::swap(unused00_, other->unused00_);
    std::swap(unused01_, other->unused01_);
    std::swap(unused02_, other->unused02_);
    std::swap(unused03_, other->unused03_);
    std::swap(unused04_, other->unused04_);
    std::swap(unused05_, other->unused05_);
    std::swap(unused06_, other->unused06_);
    std::swap(unused07_, other->unused07_);
    std::swap(unused08_, other->unused08_);
    std::swap(unused09_, other->unused09_);
    headers_.Swap(&other->headers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayloadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayloadInfo_descriptor_;
  metadata.reflection = PayloadInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EPICS

// @@protoc_insertion_point(global_scope)
